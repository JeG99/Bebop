Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> routine
Rule 1     routine -> routine_init ID SEMICOLON global_scope_init global_vars_block instructions_block function_block BEGIN COLON LSQBRACKET local_scope_init local_vars_block fill_main_jump instructions_block RSQBRACKET
Rule 2     routine_init -> ROUTINE
Rule 3     fill_main_jump -> <empty>
Rule 4     global_vars_block -> GLOBALS COLON var_declarations
Rule 5     global_vars_block -> empty
Rule 6     local_vars_block -> LOCALS COLON var_declarations
Rule 7     local_vars_block -> empty
Rule 8     instructions_block -> INSTRUCTIONS COLON statements
Rule 9     instructions_block -> empty
Rule 10    proc_instructions_block -> INSTRUCTIONS COLON proc_statements
Rule 11    proc_instructions_block -> empty
Rule 12    proc_statements -> write SEMICOLON proc_statements
Rule 13    proc_statements -> read SEMICOLON proc_statements
Rule 14    proc_statements -> var_assignment SEMICOLON proc_statements
Rule 15    proc_statements -> proc_condition proc_statements
Rule 16    proc_statements -> proc_loop proc_statements
Rule 17    proc_statements -> function_call SEMICOLON proc_statements
Rule 18    proc_statements -> return expression return_semicolon proc_statements
Rule 19    proc_statements -> empty
Rule 20    global_scope_init -> <empty>
Rule 21    local_scope_init -> <empty>
Rule 22    var_declarations -> VAR simple_declaration var_declarations
Rule 23    var_declarations -> VAR array_declaration var_declarations
Rule 24    var_declarations -> VAR matrix_declaration var_declarations
Rule 25    var_declarations -> empty
Rule 26    simple_declaration -> ID COLON var_type SEMICOLON
Rule 27    array_declaration -> ID LSQBRACKET CONST_INT RSQBRACKET COLON type SEMICOLON
Rule 28    matrix_declaration -> ID LSQBRACKET CONST_INT RSQBRACKET LSQBRACKET CONST_INT RSQBRACKET COLON type SEMICOLON
Rule 29    var_type -> type
Rule 30    function_block -> PROCEDURES COLON function_declarations
Rule 31    function_block -> empty
Rule 32    function_declarations -> PROC ID proc_scope_init LPAREN params0 RPAREN COLON VOID set_return_type LBRACKET local_vars_block store_curr_ip instructions_block function_rbracket function_declarations
Rule 33    function_declarations -> PROC ID proc_scope_init LPAREN params0 RPAREN COLON func_type set_return_type LBRACKET local_vars_block store_curr_ip proc_instructions_block RBRACKET function_declarations
Rule 34    function_declarations -> empty
Rule 35    function_rbracket -> RBRACKET
Rule 36    proc_scope_init -> <empty>
Rule 37    store_curr_ip -> <empty>
Rule 38    set_return_type -> <empty>
Rule 39    return -> RETURN
Rule 40    return_semicolon -> SEMICOLON
Rule 41    func_type -> type
Rule 42    params0 -> param params1
Rule 43    params0 -> empty
Rule 44    params1 -> COMMA param params1
Rule 45    params1 -> empty
Rule 46    param -> ID COLON type
Rule 47    statements -> write SEMICOLON statements
Rule 48    statements -> read SEMICOLON statements
Rule 49    statements -> var_assignment SEMICOLON statements
Rule 50    statements -> condition statements
Rule 51    statements -> loop statements
Rule 52    statements -> function_call SEMICOLON statements
Rule 53    statements -> empty
Rule 54    write -> WRITE write_params0
Rule 55    write_params0 -> write_operator expression produce_write_quad write_params1
Rule 56    write_params0 -> write_operator const_text produce_write_quad write_params1
Rule 57    write_params1 -> COMMA write_operator expression produce_write_quad write_params1
Rule 58    write_params1 -> COMMA write_operator const_text produce_write_quad write_params1
Rule 59    write_params1 -> empty
Rule 60    const_text -> CONST_TEXT
Rule 61    write_operator -> <empty>
Rule 62    produce_write_quad -> <empty>
Rule 63    read -> READ push_operator identifier
Rule 64    var_assignment -> simple_assignment
Rule 65    var_assignment -> array_assignment
Rule 66    var_assignment -> matrix_assignment
Rule 67    simple_assignment -> identifier ASSIGN push_operator expression
Rule 68    array_assignment -> array_access ASSIGN push_operator expression
Rule 69    matrix_assignment -> matrix_access ASSIGN push_operator expression
Rule 70    condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET fill_pending_jump
Rule 71    condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET else LBRACKET statements RBRACKET fill_pending_jump
Rule 72    proc_condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET fill_pending_jump
Rule 73    proc_condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET else LBRACKET proc_statements RBRACKET fill_pending_jump
Rule 74    cond_lparen -> LPAREN
Rule 75    cond_rparen -> RPAREN
Rule 76    fill_pending_jump -> <empty>
Rule 77    else -> ELSE
Rule 78    loop -> repeat cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET fill_returning_jump
Rule 79    proc_loop -> repeat cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET fill_returning_jump
Rule 80    repeat -> REPEAT
Rule 81    fill_returning_jump -> <empty>
Rule 82    function_call -> ID function_call_check function_call_lparen call_params0 function_call_rparen
Rule 83    function_call_check -> <empty>
Rule 84    function_call_lparen -> LPAREN
Rule 85    function_call_rparen -> RPAREN
Rule 86    call_params0 -> hyper_expression handle_call_param call_params1
Rule 87    call_params0 -> empty
Rule 88    call_params1 -> COMMA hyper_expression handle_call_param call_params1
Rule 89    call_params1 -> empty
Rule 90    handle_call_param -> <empty>
Rule 91    hyper_expression -> hyper_expression AND push_operator hyper_expression
Rule 92    hyper_expression -> hyper_expression OR push_operator hyper_expression
Rule 93    hyper_expression -> super_expression produce_hyperexp_quad
Rule 94    super_expression -> super_expression LTHAN push_operator super_expression
Rule 95    super_expression -> super_expression GTHAN push_operator super_expression
Rule 96    super_expression -> super_expression EQUAL push_operator super_expression
Rule 97    super_expression -> super_expression DIFFERENT push_operator super_expression
Rule 98    super_expression -> expression produce_superexp_quad
Rule 99    expression -> expression ADD push_operator expression
Rule 100   expression -> expression SUB push_operator expression
Rule 101   expression -> term produce_exp_quad
Rule 102   term -> term MUL push_operator term
Rule 103   term -> term DIV push_operator term
Rule 104   term -> factor produce_term_quad
Rule 105   push_operator -> <empty>
Rule 106   produce_hyperexp_quad -> <empty>
Rule 107   produce_superexp_quad -> <empty>
Rule 108   produce_exp_quad -> <empty>
Rule 109   produce_term_quad -> <empty>
Rule 110   factor -> identifier
Rule 111   factor -> const_int
Rule 112   factor -> const_float
Rule 113   factor -> LPAREN push_cap expression RPAREN pop_cap
Rule 114   factor -> array_access
Rule 115   factor -> matrix_access
Rule 116   factor -> function_call
Rule 117   identifier -> ID
Rule 118   const_int -> CONST_INT
Rule 119   const_float -> CONST_FLOAT
Rule 120   push_cap -> <empty>
Rule 121   pop_cap -> <empty>
Rule 122   array_access -> identifier lsqbracket expression array_rsqbracket
Rule 123   matrix_access -> identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2
Rule 124   lsqbracket -> LSQBRACKET
Rule 125   array_rsqbracket -> RSQBRACKET
Rule 126   matrix_rsqbracket_1 -> RSQBRACKET
Rule 127   matrix_lsqbracket_2 -> LSQBRACKET
Rule 128   matrix_rsqbracket_2 -> RSQBRACKET
Rule 129   type -> INT
Rule 130   type -> FLOAT
Rule 131   empty -> <empty>

Terminals, with rules where they appear

ADD                  : 99
AND                  : 91
ASSIGN               : 67 68 69
BEGIN                : 1
COLON                : 1 4 6 8 10 26 27 28 30 32 33 46
COMMA                : 44 57 58 88
CONST_FLOAT          : 119
CONST_INT            : 27 28 28 118
CONST_TEXT           : 60
DIFFERENT            : 97
DIV                  : 103
ELSE                 : 77
EQUAL                : 96
FLOAT                : 130
GLOBALS              : 4
GTHAN                : 95
ID                   : 1 26 27 28 32 33 46 82 117
IF                   : 70 71 72 73
INSTRUCTIONS         : 8 10
INT                  : 129
LBRACKET             : 32 33 70 71 71 72 73 73 78 79
LOCALS               : 6
LPAREN               : 32 33 74 84 113
LSQBRACKET           : 1 27 28 28 124 127
LTHAN                : 94
MUL                  : 102
OR                   : 92
PROC                 : 32 33
PROCEDURES           : 30
RBRACKET             : 33 35 70 71 71 72 73 73 78 79
READ                 : 63
REPEAT               : 80
RETURN               : 39
ROUTINE              : 2
RPAREN               : 32 33 75 85 113
RSQBRACKET           : 1 27 28 28 125 126 128
SEMICOLON            : 1 12 13 14 17 26 27 28 40 47 48 49 52
SUB                  : 100
VAR                  : 22 23 24
VOID                 : 32
WRITE                : 54
error                : 

Nonterminals, with rules where they appear

array_access         : 68 114
array_assignment     : 65
array_declaration    : 23
array_rsqbracket     : 122
call_params0         : 82
call_params1         : 86 88
cond_lparen          : 70 71 72 73 78 79
cond_rparen          : 70 71 72 73 78 79
condition            : 50
const_float          : 112
const_int            : 111
const_text           : 56 58
else                 : 71 73
empty                : 5 7 9 11 19 25 31 34 43 45 53 59 87 89
expression           : 18 55 57 67 68 69 98 99 99 100 100 113 122 123 123
factor               : 104
fill_main_jump       : 1
fill_pending_jump    : 70 71 72 73
fill_returning_jump  : 78 79
func_type            : 33
function_block       : 1
function_call        : 17 52 116
function_call_check  : 82
function_call_lparen : 82
function_call_rparen : 82
function_declarations : 30 32 33
function_rbracket    : 32
global_scope_init    : 1
global_vars_block    : 1
handle_call_param    : 86 88
hyper_expression     : 70 71 72 73 78 79 86 88 91 91 92 92
identifier           : 63 67 110 122 123
instructions_block   : 1 1 32
local_scope_init     : 1
local_vars_block     : 1 32 33
loop                 : 51
lsqbracket           : 122 123
matrix_access        : 69 115
matrix_assignment    : 66
matrix_declaration   : 24
matrix_lsqbracket_2  : 123
matrix_rsqbracket_1  : 123
matrix_rsqbracket_2  : 123
param                : 42 44
params0              : 32 33
params1              : 42 44
pop_cap              : 113
proc_condition       : 15
proc_instructions_block : 33
proc_loop            : 16
proc_scope_init      : 32 33
proc_statements      : 10 12 13 14 15 16 17 18 72 73 73 79
produce_exp_quad     : 101
produce_hyperexp_quad : 93
produce_superexp_quad : 98
produce_term_quad    : 104
produce_write_quad   : 55 56 57 58
push_cap             : 113
push_operator        : 63 67 68 69 91 92 94 95 96 97 99 100 102 103
read                 : 13 48
repeat               : 78 79
return               : 18
return_semicolon     : 18
routine              : 0
routine_init         : 1
set_return_type      : 32 33
simple_assignment    : 64
simple_declaration   : 22
statements           : 8 47 48 49 50 51 52 70 71 71 78
store_curr_ip        : 32 33
super_expression     : 93 94 94 95 95 96 96 97 97
term                 : 101 102 102 103 103
type                 : 27 28 29 41 46
var_assignment       : 14 49
var_declarations     : 4 6 22 23 24
var_type             : 26
write                : 12 47
write_operator       : 55 56 57 58
write_params0        : 54
write_params1        : 55 56 57 58

Parsing method: LALR

state 0

    (0) S' -> . routine
    (1) routine -> . routine_init ID SEMICOLON global_scope_init global_vars_block instructions_block function_block BEGIN COLON LSQBRACKET local_scope_init local_vars_block fill_main_jump instructions_block RSQBRACKET
    (2) routine_init -> . ROUTINE

    ROUTINE         shift and go to state 3

    routine                        shift and go to state 1
    routine_init                   shift and go to state 2

state 1

    (0) S' -> routine .



state 2

    (1) routine -> routine_init . ID SEMICOLON global_scope_init global_vars_block instructions_block function_block BEGIN COLON LSQBRACKET local_scope_init local_vars_block fill_main_jump instructions_block RSQBRACKET

    ID              shift and go to state 4


state 3

    (2) routine_init -> ROUTINE .

    ID              reduce using rule 2 (routine_init -> ROUTINE .)


state 4

    (1) routine -> routine_init ID . SEMICOLON global_scope_init global_vars_block instructions_block function_block BEGIN COLON LSQBRACKET local_scope_init local_vars_block fill_main_jump instructions_block RSQBRACKET

    SEMICOLON       shift and go to state 5


state 5

    (1) routine -> routine_init ID SEMICOLON . global_scope_init global_vars_block instructions_block function_block BEGIN COLON LSQBRACKET local_scope_init local_vars_block fill_main_jump instructions_block RSQBRACKET
    (20) global_scope_init -> .

    GLOBALS         reduce using rule 20 (global_scope_init -> .)
    INSTRUCTIONS    reduce using rule 20 (global_scope_init -> .)
    PROCEDURES      reduce using rule 20 (global_scope_init -> .)
    BEGIN           reduce using rule 20 (global_scope_init -> .)

    global_scope_init              shift and go to state 6

state 6

    (1) routine -> routine_init ID SEMICOLON global_scope_init . global_vars_block instructions_block function_block BEGIN COLON LSQBRACKET local_scope_init local_vars_block fill_main_jump instructions_block RSQBRACKET
    (4) global_vars_block -> . GLOBALS COLON var_declarations
    (5) global_vars_block -> . empty
    (131) empty -> .

    GLOBALS         shift and go to state 8
    INSTRUCTIONS    reduce using rule 131 (empty -> .)
    PROCEDURES      reduce using rule 131 (empty -> .)
    BEGIN           reduce using rule 131 (empty -> .)

    global_vars_block              shift and go to state 7
    empty                          shift and go to state 9

state 7

    (1) routine -> routine_init ID SEMICOLON global_scope_init global_vars_block . instructions_block function_block BEGIN COLON LSQBRACKET local_scope_init local_vars_block fill_main_jump instructions_block RSQBRACKET
    (8) instructions_block -> . INSTRUCTIONS COLON statements
    (9) instructions_block -> . empty
    (131) empty -> .

    INSTRUCTIONS    shift and go to state 11
    PROCEDURES      reduce using rule 131 (empty -> .)
    BEGIN           reduce using rule 131 (empty -> .)

    instructions_block             shift and go to state 10
    empty                          shift and go to state 12

state 8

    (4) global_vars_block -> GLOBALS . COLON var_declarations

    COLON           shift and go to state 13


state 9

    (5) global_vars_block -> empty .

    INSTRUCTIONS    reduce using rule 5 (global_vars_block -> empty .)
    PROCEDURES      reduce using rule 5 (global_vars_block -> empty .)
    BEGIN           reduce using rule 5 (global_vars_block -> empty .)


state 10

    (1) routine -> routine_init ID SEMICOLON global_scope_init global_vars_block instructions_block . function_block BEGIN COLON LSQBRACKET local_scope_init local_vars_block fill_main_jump instructions_block RSQBRACKET
    (30) function_block -> . PROCEDURES COLON function_declarations
    (31) function_block -> . empty
    (131) empty -> .

    PROCEDURES      shift and go to state 15
    BEGIN           reduce using rule 131 (empty -> .)

    function_block                 shift and go to state 14
    empty                          shift and go to state 16

state 11

    (8) instructions_block -> INSTRUCTIONS . COLON statements

    COLON           shift and go to state 17


state 12

    (9) instructions_block -> empty .

    PROCEDURES      reduce using rule 9 (instructions_block -> empty .)
    BEGIN           reduce using rule 9 (instructions_block -> empty .)
    RSQBRACKET      reduce using rule 9 (instructions_block -> empty .)
    RBRACKET        reduce using rule 9 (instructions_block -> empty .)


state 13

    (4) global_vars_block -> GLOBALS COLON . var_declarations
    (22) var_declarations -> . VAR simple_declaration var_declarations
    (23) var_declarations -> . VAR array_declaration var_declarations
    (24) var_declarations -> . VAR matrix_declaration var_declarations
    (25) var_declarations -> . empty
    (131) empty -> .

    VAR             shift and go to state 19
    INSTRUCTIONS    reduce using rule 131 (empty -> .)
    PROCEDURES      reduce using rule 131 (empty -> .)
    BEGIN           reduce using rule 131 (empty -> .)

    var_declarations               shift and go to state 18
    empty                          shift and go to state 20

state 14

    (1) routine -> routine_init ID SEMICOLON global_scope_init global_vars_block instructions_block function_block . BEGIN COLON LSQBRACKET local_scope_init local_vars_block fill_main_jump instructions_block RSQBRACKET

    BEGIN           shift and go to state 21


state 15

    (30) function_block -> PROCEDURES . COLON function_declarations

    COLON           shift and go to state 22


state 16

    (31) function_block -> empty .

    BEGIN           reduce using rule 31 (function_block -> empty .)


state 17

    (8) instructions_block -> INSTRUCTIONS COLON . statements
    (47) statements -> . write SEMICOLON statements
    (48) statements -> . read SEMICOLON statements
    (49) statements -> . var_assignment SEMICOLON statements
    (50) statements -> . condition statements
    (51) statements -> . loop statements
    (52) statements -> . function_call SEMICOLON statements
    (53) statements -> . empty
    (54) write -> . WRITE write_params0
    (63) read -> . READ push_operator identifier
    (64) var_assignment -> . simple_assignment
    (65) var_assignment -> . array_assignment
    (66) var_assignment -> . matrix_assignment
    (70) condition -> . IF cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET fill_pending_jump
    (71) condition -> . IF cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET else LBRACKET statements RBRACKET fill_pending_jump
    (78) loop -> . repeat cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET fill_returning_jump
    (82) function_call -> . ID function_call_check function_call_lparen call_params0 function_call_rparen
    (131) empty -> .
    (67) simple_assignment -> . identifier ASSIGN push_operator expression
    (68) array_assignment -> . array_access ASSIGN push_operator expression
    (69) matrix_assignment -> . matrix_access ASSIGN push_operator expression
    (80) repeat -> . REPEAT
    (117) identifier -> . ID
    (122) array_access -> . identifier lsqbracket expression array_rsqbracket
    (123) matrix_access -> . identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2

    WRITE           shift and go to state 31
    READ            shift and go to state 32
    IF              shift and go to state 37
    ID              shift and go to state 39
    PROCEDURES      reduce using rule 131 (empty -> .)
    BEGIN           reduce using rule 131 (empty -> .)
    RSQBRACKET      reduce using rule 131 (empty -> .)
    RBRACKET        reduce using rule 131 (empty -> .)
    REPEAT          shift and go to state 42

    statements                     shift and go to state 23
    write                          shift and go to state 24
    read                           shift and go to state 25
    var_assignment                 shift and go to state 26
    condition                      shift and go to state 27
    loop                           shift and go to state 28
    function_call                  shift and go to state 29
    empty                          shift and go to state 30
    identifier                     shift and go to state 33
    simple_assignment              shift and go to state 34
    array_assignment               shift and go to state 35
    matrix_assignment              shift and go to state 36
    repeat                         shift and go to state 38
    array_access                   shift and go to state 40
    matrix_access                  shift and go to state 41

state 18

    (4) global_vars_block -> GLOBALS COLON var_declarations .

    INSTRUCTIONS    reduce using rule 4 (global_vars_block -> GLOBALS COLON var_declarations .)
    PROCEDURES      reduce using rule 4 (global_vars_block -> GLOBALS COLON var_declarations .)
    BEGIN           reduce using rule 4 (global_vars_block -> GLOBALS COLON var_declarations .)


state 19

    (22) var_declarations -> VAR . simple_declaration var_declarations
    (23) var_declarations -> VAR . array_declaration var_declarations
    (24) var_declarations -> VAR . matrix_declaration var_declarations
    (26) simple_declaration -> . ID COLON var_type SEMICOLON
    (27) array_declaration -> . ID LSQBRACKET CONST_INT RSQBRACKET COLON type SEMICOLON
    (28) matrix_declaration -> . ID LSQBRACKET CONST_INT RSQBRACKET LSQBRACKET CONST_INT RSQBRACKET COLON type SEMICOLON

    ID              shift and go to state 46

    simple_declaration             shift and go to state 43
    array_declaration              shift and go to state 44
    matrix_declaration             shift and go to state 45

state 20

    (25) var_declarations -> empty .

    INSTRUCTIONS    reduce using rule 25 (var_declarations -> empty .)
    PROCEDURES      reduce using rule 25 (var_declarations -> empty .)
    BEGIN           reduce using rule 25 (var_declarations -> empty .)
    RSQBRACKET      reduce using rule 25 (var_declarations -> empty .)
    RBRACKET        reduce using rule 25 (var_declarations -> empty .)


state 21

    (1) routine -> routine_init ID SEMICOLON global_scope_init global_vars_block instructions_block function_block BEGIN . COLON LSQBRACKET local_scope_init local_vars_block fill_main_jump instructions_block RSQBRACKET

    COLON           shift and go to state 47


state 22

    (30) function_block -> PROCEDURES COLON . function_declarations
    (32) function_declarations -> . PROC ID proc_scope_init LPAREN params0 RPAREN COLON VOID set_return_type LBRACKET local_vars_block store_curr_ip instructions_block function_rbracket function_declarations
    (33) function_declarations -> . PROC ID proc_scope_init LPAREN params0 RPAREN COLON func_type set_return_type LBRACKET local_vars_block store_curr_ip proc_instructions_block RBRACKET function_declarations
    (34) function_declarations -> . empty
    (131) empty -> .

    PROC            shift and go to state 49
    BEGIN           reduce using rule 131 (empty -> .)

    function_declarations          shift and go to state 48
    empty                          shift and go to state 50

state 23

    (8) instructions_block -> INSTRUCTIONS COLON statements .

    PROCEDURES      reduce using rule 8 (instructions_block -> INSTRUCTIONS COLON statements .)
    BEGIN           reduce using rule 8 (instructions_block -> INSTRUCTIONS COLON statements .)
    RSQBRACKET      reduce using rule 8 (instructions_block -> INSTRUCTIONS COLON statements .)
    RBRACKET        reduce using rule 8 (instructions_block -> INSTRUCTIONS COLON statements .)


state 24

    (47) statements -> write . SEMICOLON statements

    SEMICOLON       shift and go to state 51


state 25

    (48) statements -> read . SEMICOLON statements

    SEMICOLON       shift and go to state 52


state 26

    (49) statements -> var_assignment . SEMICOLON statements

    SEMICOLON       shift and go to state 53


state 27

    (50) statements -> condition . statements
    (47) statements -> . write SEMICOLON statements
    (48) statements -> . read SEMICOLON statements
    (49) statements -> . var_assignment SEMICOLON statements
    (50) statements -> . condition statements
    (51) statements -> . loop statements
    (52) statements -> . function_call SEMICOLON statements
    (53) statements -> . empty
    (54) write -> . WRITE write_params0
    (63) read -> . READ push_operator identifier
    (64) var_assignment -> . simple_assignment
    (65) var_assignment -> . array_assignment
    (66) var_assignment -> . matrix_assignment
    (70) condition -> . IF cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET fill_pending_jump
    (71) condition -> . IF cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET else LBRACKET statements RBRACKET fill_pending_jump
    (78) loop -> . repeat cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET fill_returning_jump
    (82) function_call -> . ID function_call_check function_call_lparen call_params0 function_call_rparen
    (131) empty -> .
    (67) simple_assignment -> . identifier ASSIGN push_operator expression
    (68) array_assignment -> . array_access ASSIGN push_operator expression
    (69) matrix_assignment -> . matrix_access ASSIGN push_operator expression
    (80) repeat -> . REPEAT
    (117) identifier -> . ID
    (122) array_access -> . identifier lsqbracket expression array_rsqbracket
    (123) matrix_access -> . identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2

    WRITE           shift and go to state 31
    READ            shift and go to state 32
    IF              shift and go to state 37
    ID              shift and go to state 39
    PROCEDURES      reduce using rule 131 (empty -> .)
    BEGIN           reduce using rule 131 (empty -> .)
    RSQBRACKET      reduce using rule 131 (empty -> .)
    RBRACKET        reduce using rule 131 (empty -> .)
    REPEAT          shift and go to state 42

    condition                      shift and go to state 27
    statements                     shift and go to state 54
    write                          shift and go to state 24
    read                           shift and go to state 25
    var_assignment                 shift and go to state 26
    loop                           shift and go to state 28
    function_call                  shift and go to state 29
    empty                          shift and go to state 30
    identifier                     shift and go to state 33
    simple_assignment              shift and go to state 34
    array_assignment               shift and go to state 35
    matrix_assignment              shift and go to state 36
    repeat                         shift and go to state 38
    array_access                   shift and go to state 40
    matrix_access                  shift and go to state 41

state 28

    (51) statements -> loop . statements
    (47) statements -> . write SEMICOLON statements
    (48) statements -> . read SEMICOLON statements
    (49) statements -> . var_assignment SEMICOLON statements
    (50) statements -> . condition statements
    (51) statements -> . loop statements
    (52) statements -> . function_call SEMICOLON statements
    (53) statements -> . empty
    (54) write -> . WRITE write_params0
    (63) read -> . READ push_operator identifier
    (64) var_assignment -> . simple_assignment
    (65) var_assignment -> . array_assignment
    (66) var_assignment -> . matrix_assignment
    (70) condition -> . IF cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET fill_pending_jump
    (71) condition -> . IF cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET else LBRACKET statements RBRACKET fill_pending_jump
    (78) loop -> . repeat cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET fill_returning_jump
    (82) function_call -> . ID function_call_check function_call_lparen call_params0 function_call_rparen
    (131) empty -> .
    (67) simple_assignment -> . identifier ASSIGN push_operator expression
    (68) array_assignment -> . array_access ASSIGN push_operator expression
    (69) matrix_assignment -> . matrix_access ASSIGN push_operator expression
    (80) repeat -> . REPEAT
    (117) identifier -> . ID
    (122) array_access -> . identifier lsqbracket expression array_rsqbracket
    (123) matrix_access -> . identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2

    WRITE           shift and go to state 31
    READ            shift and go to state 32
    IF              shift and go to state 37
    ID              shift and go to state 39
    PROCEDURES      reduce using rule 131 (empty -> .)
    BEGIN           reduce using rule 131 (empty -> .)
    RSQBRACKET      reduce using rule 131 (empty -> .)
    RBRACKET        reduce using rule 131 (empty -> .)
    REPEAT          shift and go to state 42

    loop                           shift and go to state 28
    statements                     shift and go to state 55
    write                          shift and go to state 24
    read                           shift and go to state 25
    var_assignment                 shift and go to state 26
    condition                      shift and go to state 27
    function_call                  shift and go to state 29
    empty                          shift and go to state 30
    identifier                     shift and go to state 33
    simple_assignment              shift and go to state 34
    array_assignment               shift and go to state 35
    matrix_assignment              shift and go to state 36
    repeat                         shift and go to state 38
    array_access                   shift and go to state 40
    matrix_access                  shift and go to state 41

state 29

    (52) statements -> function_call . SEMICOLON statements

    SEMICOLON       shift and go to state 56


state 30

    (53) statements -> empty .

    PROCEDURES      reduce using rule 53 (statements -> empty .)
    BEGIN           reduce using rule 53 (statements -> empty .)
    RSQBRACKET      reduce using rule 53 (statements -> empty .)
    RBRACKET        reduce using rule 53 (statements -> empty .)


state 31

    (54) write -> WRITE . write_params0
    (55) write_params0 -> . write_operator expression produce_write_quad write_params1
    (56) write_params0 -> . write_operator const_text produce_write_quad write_params1
    (61) write_operator -> .

    CONST_TEXT      reduce using rule 61 (write_operator -> .)
    LPAREN          reduce using rule 61 (write_operator -> .)
    ID              reduce using rule 61 (write_operator -> .)
    CONST_INT       reduce using rule 61 (write_operator -> .)
    CONST_FLOAT     reduce using rule 61 (write_operator -> .)

    write_params0                  shift and go to state 57
    write_operator                 shift and go to state 58

state 32

    (63) read -> READ . push_operator identifier
    (105) push_operator -> .

    ID              reduce using rule 105 (push_operator -> .)

    push_operator                  shift and go to state 59

state 33

    (67) simple_assignment -> identifier . ASSIGN push_operator expression
    (122) array_access -> identifier . lsqbracket expression array_rsqbracket
    (123) matrix_access -> identifier . lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2
    (124) lsqbracket -> . LSQBRACKET

    ASSIGN          shift and go to state 60
    LSQBRACKET      shift and go to state 62

    lsqbracket                     shift and go to state 61

state 34

    (64) var_assignment -> simple_assignment .

    SEMICOLON       reduce using rule 64 (var_assignment -> simple_assignment .)


state 35

    (65) var_assignment -> array_assignment .

    SEMICOLON       reduce using rule 65 (var_assignment -> array_assignment .)


state 36

    (66) var_assignment -> matrix_assignment .

    SEMICOLON       reduce using rule 66 (var_assignment -> matrix_assignment .)


state 37

    (70) condition -> IF . cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET fill_pending_jump
    (71) condition -> IF . cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET else LBRACKET statements RBRACKET fill_pending_jump
    (74) cond_lparen -> . LPAREN

    LPAREN          shift and go to state 64

    cond_lparen                    shift and go to state 63

state 38

    (78) loop -> repeat . cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET fill_returning_jump
    (74) cond_lparen -> . LPAREN

    LPAREN          shift and go to state 64

    cond_lparen                    shift and go to state 65

state 39

    (82) function_call -> ID . function_call_check function_call_lparen call_params0 function_call_rparen
    (117) identifier -> ID .
    (83) function_call_check -> .

    ASSIGN          reduce using rule 117 (identifier -> ID .)
    LSQBRACKET      reduce using rule 117 (identifier -> ID .)
    LPAREN          reduce using rule 83 (function_call_check -> .)

    function_call_check            shift and go to state 66

state 40

    (68) array_assignment -> array_access . ASSIGN push_operator expression

    ASSIGN          shift and go to state 67


state 41

    (69) matrix_assignment -> matrix_access . ASSIGN push_operator expression

    ASSIGN          shift and go to state 68


state 42

    (80) repeat -> REPEAT .

    LPAREN          reduce using rule 80 (repeat -> REPEAT .)


state 43

    (22) var_declarations -> VAR simple_declaration . var_declarations
    (22) var_declarations -> . VAR simple_declaration var_declarations
    (23) var_declarations -> . VAR array_declaration var_declarations
    (24) var_declarations -> . VAR matrix_declaration var_declarations
    (25) var_declarations -> . empty
    (131) empty -> .

    VAR             shift and go to state 19
    INSTRUCTIONS    reduce using rule 131 (empty -> .)
    PROCEDURES      reduce using rule 131 (empty -> .)
    BEGIN           reduce using rule 131 (empty -> .)
    RSQBRACKET      reduce using rule 131 (empty -> .)
    RBRACKET        reduce using rule 131 (empty -> .)

    var_declarations               shift and go to state 69
    empty                          shift and go to state 20

state 44

    (23) var_declarations -> VAR array_declaration . var_declarations
    (22) var_declarations -> . VAR simple_declaration var_declarations
    (23) var_declarations -> . VAR array_declaration var_declarations
    (24) var_declarations -> . VAR matrix_declaration var_declarations
    (25) var_declarations -> . empty
    (131) empty -> .

    VAR             shift and go to state 19
    INSTRUCTIONS    reduce using rule 131 (empty -> .)
    PROCEDURES      reduce using rule 131 (empty -> .)
    BEGIN           reduce using rule 131 (empty -> .)
    RSQBRACKET      reduce using rule 131 (empty -> .)
    RBRACKET        reduce using rule 131 (empty -> .)

    var_declarations               shift and go to state 70
    empty                          shift and go to state 20

state 45

    (24) var_declarations -> VAR matrix_declaration . var_declarations
    (22) var_declarations -> . VAR simple_declaration var_declarations
    (23) var_declarations -> . VAR array_declaration var_declarations
    (24) var_declarations -> . VAR matrix_declaration var_declarations
    (25) var_declarations -> . empty
    (131) empty -> .

    VAR             shift and go to state 19
    INSTRUCTIONS    reduce using rule 131 (empty -> .)
    PROCEDURES      reduce using rule 131 (empty -> .)
    BEGIN           reduce using rule 131 (empty -> .)
    RSQBRACKET      reduce using rule 131 (empty -> .)
    RBRACKET        reduce using rule 131 (empty -> .)

    var_declarations               shift and go to state 71
    empty                          shift and go to state 20

state 46

    (26) simple_declaration -> ID . COLON var_type SEMICOLON
    (27) array_declaration -> ID . LSQBRACKET CONST_INT RSQBRACKET COLON type SEMICOLON
    (28) matrix_declaration -> ID . LSQBRACKET CONST_INT RSQBRACKET LSQBRACKET CONST_INT RSQBRACKET COLON type SEMICOLON

    COLON           shift and go to state 72
    LSQBRACKET      shift and go to state 73


state 47

    (1) routine -> routine_init ID SEMICOLON global_scope_init global_vars_block instructions_block function_block BEGIN COLON . LSQBRACKET local_scope_init local_vars_block fill_main_jump instructions_block RSQBRACKET

    LSQBRACKET      shift and go to state 74


state 48

    (30) function_block -> PROCEDURES COLON function_declarations .

    BEGIN           reduce using rule 30 (function_block -> PROCEDURES COLON function_declarations .)


state 49

    (32) function_declarations -> PROC . ID proc_scope_init LPAREN params0 RPAREN COLON VOID set_return_type LBRACKET local_vars_block store_curr_ip instructions_block function_rbracket function_declarations
    (33) function_declarations -> PROC . ID proc_scope_init LPAREN params0 RPAREN COLON func_type set_return_type LBRACKET local_vars_block store_curr_ip proc_instructions_block RBRACKET function_declarations

    ID              shift and go to state 75


state 50

    (34) function_declarations -> empty .

    BEGIN           reduce using rule 34 (function_declarations -> empty .)


state 51

    (47) statements -> write SEMICOLON . statements
    (47) statements -> . write SEMICOLON statements
    (48) statements -> . read SEMICOLON statements
    (49) statements -> . var_assignment SEMICOLON statements
    (50) statements -> . condition statements
    (51) statements -> . loop statements
    (52) statements -> . function_call SEMICOLON statements
    (53) statements -> . empty
    (54) write -> . WRITE write_params0
    (63) read -> . READ push_operator identifier
    (64) var_assignment -> . simple_assignment
    (65) var_assignment -> . array_assignment
    (66) var_assignment -> . matrix_assignment
    (70) condition -> . IF cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET fill_pending_jump
    (71) condition -> . IF cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET else LBRACKET statements RBRACKET fill_pending_jump
    (78) loop -> . repeat cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET fill_returning_jump
    (82) function_call -> . ID function_call_check function_call_lparen call_params0 function_call_rparen
    (131) empty -> .
    (67) simple_assignment -> . identifier ASSIGN push_operator expression
    (68) array_assignment -> . array_access ASSIGN push_operator expression
    (69) matrix_assignment -> . matrix_access ASSIGN push_operator expression
    (80) repeat -> . REPEAT
    (117) identifier -> . ID
    (122) array_access -> . identifier lsqbracket expression array_rsqbracket
    (123) matrix_access -> . identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2

    WRITE           shift and go to state 31
    READ            shift and go to state 32
    IF              shift and go to state 37
    ID              shift and go to state 39
    PROCEDURES      reduce using rule 131 (empty -> .)
    BEGIN           reduce using rule 131 (empty -> .)
    RSQBRACKET      reduce using rule 131 (empty -> .)
    RBRACKET        reduce using rule 131 (empty -> .)
    REPEAT          shift and go to state 42

    write                          shift and go to state 24
    statements                     shift and go to state 76
    read                           shift and go to state 25
    var_assignment                 shift and go to state 26
    condition                      shift and go to state 27
    loop                           shift and go to state 28
    function_call                  shift and go to state 29
    empty                          shift and go to state 30
    identifier                     shift and go to state 33
    simple_assignment              shift and go to state 34
    array_assignment               shift and go to state 35
    matrix_assignment              shift and go to state 36
    repeat                         shift and go to state 38
    array_access                   shift and go to state 40
    matrix_access                  shift and go to state 41

state 52

    (48) statements -> read SEMICOLON . statements
    (47) statements -> . write SEMICOLON statements
    (48) statements -> . read SEMICOLON statements
    (49) statements -> . var_assignment SEMICOLON statements
    (50) statements -> . condition statements
    (51) statements -> . loop statements
    (52) statements -> . function_call SEMICOLON statements
    (53) statements -> . empty
    (54) write -> . WRITE write_params0
    (63) read -> . READ push_operator identifier
    (64) var_assignment -> . simple_assignment
    (65) var_assignment -> . array_assignment
    (66) var_assignment -> . matrix_assignment
    (70) condition -> . IF cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET fill_pending_jump
    (71) condition -> . IF cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET else LBRACKET statements RBRACKET fill_pending_jump
    (78) loop -> . repeat cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET fill_returning_jump
    (82) function_call -> . ID function_call_check function_call_lparen call_params0 function_call_rparen
    (131) empty -> .
    (67) simple_assignment -> . identifier ASSIGN push_operator expression
    (68) array_assignment -> . array_access ASSIGN push_operator expression
    (69) matrix_assignment -> . matrix_access ASSIGN push_operator expression
    (80) repeat -> . REPEAT
    (117) identifier -> . ID
    (122) array_access -> . identifier lsqbracket expression array_rsqbracket
    (123) matrix_access -> . identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2

    WRITE           shift and go to state 31
    READ            shift and go to state 32
    IF              shift and go to state 37
    ID              shift and go to state 39
    PROCEDURES      reduce using rule 131 (empty -> .)
    BEGIN           reduce using rule 131 (empty -> .)
    RSQBRACKET      reduce using rule 131 (empty -> .)
    RBRACKET        reduce using rule 131 (empty -> .)
    REPEAT          shift and go to state 42

    read                           shift and go to state 25
    statements                     shift and go to state 77
    write                          shift and go to state 24
    var_assignment                 shift and go to state 26
    condition                      shift and go to state 27
    loop                           shift and go to state 28
    function_call                  shift and go to state 29
    empty                          shift and go to state 30
    identifier                     shift and go to state 33
    simple_assignment              shift and go to state 34
    array_assignment               shift and go to state 35
    matrix_assignment              shift and go to state 36
    repeat                         shift and go to state 38
    array_access                   shift and go to state 40
    matrix_access                  shift and go to state 41

state 53

    (49) statements -> var_assignment SEMICOLON . statements
    (47) statements -> . write SEMICOLON statements
    (48) statements -> . read SEMICOLON statements
    (49) statements -> . var_assignment SEMICOLON statements
    (50) statements -> . condition statements
    (51) statements -> . loop statements
    (52) statements -> . function_call SEMICOLON statements
    (53) statements -> . empty
    (54) write -> . WRITE write_params0
    (63) read -> . READ push_operator identifier
    (64) var_assignment -> . simple_assignment
    (65) var_assignment -> . array_assignment
    (66) var_assignment -> . matrix_assignment
    (70) condition -> . IF cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET fill_pending_jump
    (71) condition -> . IF cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET else LBRACKET statements RBRACKET fill_pending_jump
    (78) loop -> . repeat cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET fill_returning_jump
    (82) function_call -> . ID function_call_check function_call_lparen call_params0 function_call_rparen
    (131) empty -> .
    (67) simple_assignment -> . identifier ASSIGN push_operator expression
    (68) array_assignment -> . array_access ASSIGN push_operator expression
    (69) matrix_assignment -> . matrix_access ASSIGN push_operator expression
    (80) repeat -> . REPEAT
    (117) identifier -> . ID
    (122) array_access -> . identifier lsqbracket expression array_rsqbracket
    (123) matrix_access -> . identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2

    WRITE           shift and go to state 31
    READ            shift and go to state 32
    IF              shift and go to state 37
    ID              shift and go to state 39
    PROCEDURES      reduce using rule 131 (empty -> .)
    BEGIN           reduce using rule 131 (empty -> .)
    RSQBRACKET      reduce using rule 131 (empty -> .)
    RBRACKET        reduce using rule 131 (empty -> .)
    REPEAT          shift and go to state 42

    var_assignment                 shift and go to state 26
    statements                     shift and go to state 78
    write                          shift and go to state 24
    read                           shift and go to state 25
    condition                      shift and go to state 27
    loop                           shift and go to state 28
    function_call                  shift and go to state 29
    empty                          shift and go to state 30
    identifier                     shift and go to state 33
    simple_assignment              shift and go to state 34
    array_assignment               shift and go to state 35
    matrix_assignment              shift and go to state 36
    repeat                         shift and go to state 38
    array_access                   shift and go to state 40
    matrix_access                  shift and go to state 41

state 54

    (50) statements -> condition statements .

    PROCEDURES      reduce using rule 50 (statements -> condition statements .)
    BEGIN           reduce using rule 50 (statements -> condition statements .)
    RSQBRACKET      reduce using rule 50 (statements -> condition statements .)
    RBRACKET        reduce using rule 50 (statements -> condition statements .)


state 55

    (51) statements -> loop statements .

    PROCEDURES      reduce using rule 51 (statements -> loop statements .)
    BEGIN           reduce using rule 51 (statements -> loop statements .)
    RSQBRACKET      reduce using rule 51 (statements -> loop statements .)
    RBRACKET        reduce using rule 51 (statements -> loop statements .)


state 56

    (52) statements -> function_call SEMICOLON . statements
    (47) statements -> . write SEMICOLON statements
    (48) statements -> . read SEMICOLON statements
    (49) statements -> . var_assignment SEMICOLON statements
    (50) statements -> . condition statements
    (51) statements -> . loop statements
    (52) statements -> . function_call SEMICOLON statements
    (53) statements -> . empty
    (54) write -> . WRITE write_params0
    (63) read -> . READ push_operator identifier
    (64) var_assignment -> . simple_assignment
    (65) var_assignment -> . array_assignment
    (66) var_assignment -> . matrix_assignment
    (70) condition -> . IF cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET fill_pending_jump
    (71) condition -> . IF cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET else LBRACKET statements RBRACKET fill_pending_jump
    (78) loop -> . repeat cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET fill_returning_jump
    (82) function_call -> . ID function_call_check function_call_lparen call_params0 function_call_rparen
    (131) empty -> .
    (67) simple_assignment -> . identifier ASSIGN push_operator expression
    (68) array_assignment -> . array_access ASSIGN push_operator expression
    (69) matrix_assignment -> . matrix_access ASSIGN push_operator expression
    (80) repeat -> . REPEAT
    (117) identifier -> . ID
    (122) array_access -> . identifier lsqbracket expression array_rsqbracket
    (123) matrix_access -> . identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2

    WRITE           shift and go to state 31
    READ            shift and go to state 32
    IF              shift and go to state 37
    ID              shift and go to state 39
    PROCEDURES      reduce using rule 131 (empty -> .)
    BEGIN           reduce using rule 131 (empty -> .)
    RSQBRACKET      reduce using rule 131 (empty -> .)
    RBRACKET        reduce using rule 131 (empty -> .)
    REPEAT          shift and go to state 42

    function_call                  shift and go to state 29
    statements                     shift and go to state 79
    write                          shift and go to state 24
    read                           shift and go to state 25
    var_assignment                 shift and go to state 26
    condition                      shift and go to state 27
    loop                           shift and go to state 28
    empty                          shift and go to state 30
    identifier                     shift and go to state 33
    simple_assignment              shift and go to state 34
    array_assignment               shift and go to state 35
    matrix_assignment              shift and go to state 36
    repeat                         shift and go to state 38
    array_access                   shift and go to state 40
    matrix_access                  shift and go to state 41

state 57

    (54) write -> WRITE write_params0 .

    SEMICOLON       reduce using rule 54 (write -> WRITE write_params0 .)


state 58

    (55) write_params0 -> write_operator . expression produce_write_quad write_params1
    (56) write_params0 -> write_operator . const_text produce_write_quad write_params1
    (99) expression -> . expression ADD push_operator expression
    (100) expression -> . expression SUB push_operator expression
    (101) expression -> . term produce_exp_quad
    (60) const_text -> . CONST_TEXT
    (102) term -> . term MUL push_operator term
    (103) term -> . term DIV push_operator term
    (104) term -> . factor produce_term_quad
    (110) factor -> . identifier
    (111) factor -> . const_int
    (112) factor -> . const_float
    (113) factor -> . LPAREN push_cap expression RPAREN pop_cap
    (114) factor -> . array_access
    (115) factor -> . matrix_access
    (116) factor -> . function_call
    (117) identifier -> . ID
    (118) const_int -> . CONST_INT
    (119) const_float -> . CONST_FLOAT
    (122) array_access -> . identifier lsqbracket expression array_rsqbracket
    (123) matrix_access -> . identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2
    (82) function_call -> . ID function_call_check function_call_lparen call_params0 function_call_rparen

    CONST_TEXT      shift and go to state 83
    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_FLOAT     shift and go to state 94

    expression                     shift and go to state 80
    const_text                     shift and go to state 81
    term                           shift and go to state 82
    factor                         shift and go to state 84
    identifier                     shift and go to state 85
    const_int                      shift and go to state 86
    const_float                    shift and go to state 87
    array_access                   shift and go to state 89
    matrix_access                  shift and go to state 90
    function_call                  shift and go to state 91

state 59

    (63) read -> READ push_operator . identifier
    (117) identifier -> . ID

    ID              shift and go to state 96

    identifier                     shift and go to state 95

state 60

    (67) simple_assignment -> identifier ASSIGN . push_operator expression
    (105) push_operator -> .

    LPAREN          reduce using rule 105 (push_operator -> .)
    ID              reduce using rule 105 (push_operator -> .)
    CONST_INT       reduce using rule 105 (push_operator -> .)
    CONST_FLOAT     reduce using rule 105 (push_operator -> .)

    push_operator                  shift and go to state 97

state 61

    (122) array_access -> identifier lsqbracket . expression array_rsqbracket
    (123) matrix_access -> identifier lsqbracket . expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2
    (99) expression -> . expression ADD push_operator expression
    (100) expression -> . expression SUB push_operator expression
    (101) expression -> . term produce_exp_quad
    (102) term -> . term MUL push_operator term
    (103) term -> . term DIV push_operator term
    (104) term -> . factor produce_term_quad
    (110) factor -> . identifier
    (111) factor -> . const_int
    (112) factor -> . const_float
    (113) factor -> . LPAREN push_cap expression RPAREN pop_cap
    (114) factor -> . array_access
    (115) factor -> . matrix_access
    (116) factor -> . function_call
    (117) identifier -> . ID
    (118) const_int -> . CONST_INT
    (119) const_float -> . CONST_FLOAT
    (122) array_access -> . identifier lsqbracket expression array_rsqbracket
    (123) matrix_access -> . identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2
    (82) function_call -> . ID function_call_check function_call_lparen call_params0 function_call_rparen

    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_FLOAT     shift and go to state 94

    identifier                     shift and go to state 85
    expression                     shift and go to state 98
    term                           shift and go to state 82
    factor                         shift and go to state 84
    const_int                      shift and go to state 86
    const_float                    shift and go to state 87
    array_access                   shift and go to state 89
    matrix_access                  shift and go to state 90
    function_call                  shift and go to state 91

state 62

    (124) lsqbracket -> LSQBRACKET .

    LPAREN          reduce using rule 124 (lsqbracket -> LSQBRACKET .)
    ID              reduce using rule 124 (lsqbracket -> LSQBRACKET .)
    CONST_INT       reduce using rule 124 (lsqbracket -> LSQBRACKET .)
    CONST_FLOAT     reduce using rule 124 (lsqbracket -> LSQBRACKET .)


state 63

    (70) condition -> IF cond_lparen . hyper_expression cond_rparen LBRACKET statements RBRACKET fill_pending_jump
    (71) condition -> IF cond_lparen . hyper_expression cond_rparen LBRACKET statements RBRACKET else LBRACKET statements RBRACKET fill_pending_jump
    (91) hyper_expression -> . hyper_expression AND push_operator hyper_expression
    (92) hyper_expression -> . hyper_expression OR push_operator hyper_expression
    (93) hyper_expression -> . super_expression produce_hyperexp_quad
    (94) super_expression -> . super_expression LTHAN push_operator super_expression
    (95) super_expression -> . super_expression GTHAN push_operator super_expression
    (96) super_expression -> . super_expression EQUAL push_operator super_expression
    (97) super_expression -> . super_expression DIFFERENT push_operator super_expression
    (98) super_expression -> . expression produce_superexp_quad
    (99) expression -> . expression ADD push_operator expression
    (100) expression -> . expression SUB push_operator expression
    (101) expression -> . term produce_exp_quad
    (102) term -> . term MUL push_operator term
    (103) term -> . term DIV push_operator term
    (104) term -> . factor produce_term_quad
    (110) factor -> . identifier
    (111) factor -> . const_int
    (112) factor -> . const_float
    (113) factor -> . LPAREN push_cap expression RPAREN pop_cap
    (114) factor -> . array_access
    (115) factor -> . matrix_access
    (116) factor -> . function_call
    (117) identifier -> . ID
    (118) const_int -> . CONST_INT
    (119) const_float -> . CONST_FLOAT
    (122) array_access -> . identifier lsqbracket expression array_rsqbracket
    (123) matrix_access -> . identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2
    (82) function_call -> . ID function_call_check function_call_lparen call_params0 function_call_rparen

    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_FLOAT     shift and go to state 94

    hyper_expression               shift and go to state 99
    super_expression               shift and go to state 100
    expression                     shift and go to state 101
    term                           shift and go to state 82
    factor                         shift and go to state 84
    identifier                     shift and go to state 85
    const_int                      shift and go to state 86
    const_float                    shift and go to state 87
    array_access                   shift and go to state 89
    matrix_access                  shift and go to state 90
    function_call                  shift and go to state 91

state 64

    (74) cond_lparen -> LPAREN .

    LPAREN          reduce using rule 74 (cond_lparen -> LPAREN .)
    ID              reduce using rule 74 (cond_lparen -> LPAREN .)
    CONST_INT       reduce using rule 74 (cond_lparen -> LPAREN .)
    CONST_FLOAT     reduce using rule 74 (cond_lparen -> LPAREN .)


state 65

    (78) loop -> repeat cond_lparen . hyper_expression cond_rparen LBRACKET statements RBRACKET fill_returning_jump
    (91) hyper_expression -> . hyper_expression AND push_operator hyper_expression
    (92) hyper_expression -> . hyper_expression OR push_operator hyper_expression
    (93) hyper_expression -> . super_expression produce_hyperexp_quad
    (94) super_expression -> . super_expression LTHAN push_operator super_expression
    (95) super_expression -> . super_expression GTHAN push_operator super_expression
    (96) super_expression -> . super_expression EQUAL push_operator super_expression
    (97) super_expression -> . super_expression DIFFERENT push_operator super_expression
    (98) super_expression -> . expression produce_superexp_quad
    (99) expression -> . expression ADD push_operator expression
    (100) expression -> . expression SUB push_operator expression
    (101) expression -> . term produce_exp_quad
    (102) term -> . term MUL push_operator term
    (103) term -> . term DIV push_operator term
    (104) term -> . factor produce_term_quad
    (110) factor -> . identifier
    (111) factor -> . const_int
    (112) factor -> . const_float
    (113) factor -> . LPAREN push_cap expression RPAREN pop_cap
    (114) factor -> . array_access
    (115) factor -> . matrix_access
    (116) factor -> . function_call
    (117) identifier -> . ID
    (118) const_int -> . CONST_INT
    (119) const_float -> . CONST_FLOAT
    (122) array_access -> . identifier lsqbracket expression array_rsqbracket
    (123) matrix_access -> . identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2
    (82) function_call -> . ID function_call_check function_call_lparen call_params0 function_call_rparen

    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_FLOAT     shift and go to state 94

    hyper_expression               shift and go to state 102
    super_expression               shift and go to state 100
    expression                     shift and go to state 101
    term                           shift and go to state 82
    factor                         shift and go to state 84
    identifier                     shift and go to state 85
    const_int                      shift and go to state 86
    const_float                    shift and go to state 87
    array_access                   shift and go to state 89
    matrix_access                  shift and go to state 90
    function_call                  shift and go to state 91

state 66

    (82) function_call -> ID function_call_check . function_call_lparen call_params0 function_call_rparen
    (84) function_call_lparen -> . LPAREN

    LPAREN          shift and go to state 104

    function_call_lparen           shift and go to state 103

state 67

    (68) array_assignment -> array_access ASSIGN . push_operator expression
    (105) push_operator -> .

    LPAREN          reduce using rule 105 (push_operator -> .)
    ID              reduce using rule 105 (push_operator -> .)
    CONST_INT       reduce using rule 105 (push_operator -> .)
    CONST_FLOAT     reduce using rule 105 (push_operator -> .)

    push_operator                  shift and go to state 105

state 68

    (69) matrix_assignment -> matrix_access ASSIGN . push_operator expression
    (105) push_operator -> .

    LPAREN          reduce using rule 105 (push_operator -> .)
    ID              reduce using rule 105 (push_operator -> .)
    CONST_INT       reduce using rule 105 (push_operator -> .)
    CONST_FLOAT     reduce using rule 105 (push_operator -> .)

    push_operator                  shift and go to state 106

state 69

    (22) var_declarations -> VAR simple_declaration var_declarations .

    INSTRUCTIONS    reduce using rule 22 (var_declarations -> VAR simple_declaration var_declarations .)
    PROCEDURES      reduce using rule 22 (var_declarations -> VAR simple_declaration var_declarations .)
    BEGIN           reduce using rule 22 (var_declarations -> VAR simple_declaration var_declarations .)
    RSQBRACKET      reduce using rule 22 (var_declarations -> VAR simple_declaration var_declarations .)
    RBRACKET        reduce using rule 22 (var_declarations -> VAR simple_declaration var_declarations .)


state 70

    (23) var_declarations -> VAR array_declaration var_declarations .

    INSTRUCTIONS    reduce using rule 23 (var_declarations -> VAR array_declaration var_declarations .)
    PROCEDURES      reduce using rule 23 (var_declarations -> VAR array_declaration var_declarations .)
    BEGIN           reduce using rule 23 (var_declarations -> VAR array_declaration var_declarations .)
    RSQBRACKET      reduce using rule 23 (var_declarations -> VAR array_declaration var_declarations .)
    RBRACKET        reduce using rule 23 (var_declarations -> VAR array_declaration var_declarations .)


state 71

    (24) var_declarations -> VAR matrix_declaration var_declarations .

    INSTRUCTIONS    reduce using rule 24 (var_declarations -> VAR matrix_declaration var_declarations .)
    PROCEDURES      reduce using rule 24 (var_declarations -> VAR matrix_declaration var_declarations .)
    BEGIN           reduce using rule 24 (var_declarations -> VAR matrix_declaration var_declarations .)
    RSQBRACKET      reduce using rule 24 (var_declarations -> VAR matrix_declaration var_declarations .)
    RBRACKET        reduce using rule 24 (var_declarations -> VAR matrix_declaration var_declarations .)


state 72

    (26) simple_declaration -> ID COLON . var_type SEMICOLON
    (29) var_type -> . type
    (129) type -> . INT
    (130) type -> . FLOAT

    INT             shift and go to state 109
    FLOAT           shift and go to state 110

    var_type                       shift and go to state 107
    type                           shift and go to state 108

state 73

    (27) array_declaration -> ID LSQBRACKET . CONST_INT RSQBRACKET COLON type SEMICOLON
    (28) matrix_declaration -> ID LSQBRACKET . CONST_INT RSQBRACKET LSQBRACKET CONST_INT RSQBRACKET COLON type SEMICOLON

    CONST_INT       shift and go to state 111


state 74

    (1) routine -> routine_init ID SEMICOLON global_scope_init global_vars_block instructions_block function_block BEGIN COLON LSQBRACKET . local_scope_init local_vars_block fill_main_jump instructions_block RSQBRACKET
    (21) local_scope_init -> .

    LOCALS          reduce using rule 21 (local_scope_init -> .)
    INSTRUCTIONS    reduce using rule 21 (local_scope_init -> .)
    RSQBRACKET      reduce using rule 21 (local_scope_init -> .)

    local_scope_init               shift and go to state 112

state 75

    (32) function_declarations -> PROC ID . proc_scope_init LPAREN params0 RPAREN COLON VOID set_return_type LBRACKET local_vars_block store_curr_ip instructions_block function_rbracket function_declarations
    (33) function_declarations -> PROC ID . proc_scope_init LPAREN params0 RPAREN COLON func_type set_return_type LBRACKET local_vars_block store_curr_ip proc_instructions_block RBRACKET function_declarations
    (36) proc_scope_init -> .

    LPAREN          reduce using rule 36 (proc_scope_init -> .)

    proc_scope_init                shift and go to state 113

state 76

    (47) statements -> write SEMICOLON statements .

    PROCEDURES      reduce using rule 47 (statements -> write SEMICOLON statements .)
    BEGIN           reduce using rule 47 (statements -> write SEMICOLON statements .)
    RSQBRACKET      reduce using rule 47 (statements -> write SEMICOLON statements .)
    RBRACKET        reduce using rule 47 (statements -> write SEMICOLON statements .)


state 77

    (48) statements -> read SEMICOLON statements .

    PROCEDURES      reduce using rule 48 (statements -> read SEMICOLON statements .)
    BEGIN           reduce using rule 48 (statements -> read SEMICOLON statements .)
    RSQBRACKET      reduce using rule 48 (statements -> read SEMICOLON statements .)
    RBRACKET        reduce using rule 48 (statements -> read SEMICOLON statements .)


state 78

    (49) statements -> var_assignment SEMICOLON statements .

    PROCEDURES      reduce using rule 49 (statements -> var_assignment SEMICOLON statements .)
    BEGIN           reduce using rule 49 (statements -> var_assignment SEMICOLON statements .)
    RSQBRACKET      reduce using rule 49 (statements -> var_assignment SEMICOLON statements .)
    RBRACKET        reduce using rule 49 (statements -> var_assignment SEMICOLON statements .)


state 79

    (52) statements -> function_call SEMICOLON statements .

    PROCEDURES      reduce using rule 52 (statements -> function_call SEMICOLON statements .)
    BEGIN           reduce using rule 52 (statements -> function_call SEMICOLON statements .)
    RSQBRACKET      reduce using rule 52 (statements -> function_call SEMICOLON statements .)
    RBRACKET        reduce using rule 52 (statements -> function_call SEMICOLON statements .)


state 80

    (55) write_params0 -> write_operator expression . produce_write_quad write_params1
    (99) expression -> expression . ADD push_operator expression
    (100) expression -> expression . SUB push_operator expression
    (62) produce_write_quad -> .

    ADD             shift and go to state 115
    SUB             shift and go to state 116
    COMMA           reduce using rule 62 (produce_write_quad -> .)
    SEMICOLON       reduce using rule 62 (produce_write_quad -> .)

    produce_write_quad             shift and go to state 114

state 81

    (56) write_params0 -> write_operator const_text . produce_write_quad write_params1
    (62) produce_write_quad -> .

    COMMA           reduce using rule 62 (produce_write_quad -> .)
    SEMICOLON       reduce using rule 62 (produce_write_quad -> .)

    produce_write_quad             shift and go to state 117

state 82

    (101) expression -> term . produce_exp_quad
    (102) term -> term . MUL push_operator term
    (103) term -> term . DIV push_operator term
    (108) produce_exp_quad -> .

    MUL             shift and go to state 119
    DIV             shift and go to state 120
    ADD             reduce using rule 108 (produce_exp_quad -> .)
    SUB             reduce using rule 108 (produce_exp_quad -> .)
    COMMA           reduce using rule 108 (produce_exp_quad -> .)
    SEMICOLON       reduce using rule 108 (produce_exp_quad -> .)
    RSQBRACKET      reduce using rule 108 (produce_exp_quad -> .)
    LTHAN           reduce using rule 108 (produce_exp_quad -> .)
    GTHAN           reduce using rule 108 (produce_exp_quad -> .)
    EQUAL           reduce using rule 108 (produce_exp_quad -> .)
    DIFFERENT       reduce using rule 108 (produce_exp_quad -> .)
    AND             reduce using rule 108 (produce_exp_quad -> .)
    OR              reduce using rule 108 (produce_exp_quad -> .)
    RPAREN          reduce using rule 108 (produce_exp_quad -> .)

    produce_exp_quad               shift and go to state 118

state 83

    (60) const_text -> CONST_TEXT .

    COMMA           reduce using rule 60 (const_text -> CONST_TEXT .)
    SEMICOLON       reduce using rule 60 (const_text -> CONST_TEXT .)


state 84

    (104) term -> factor . produce_term_quad
    (109) produce_term_quad -> .

    MUL             reduce using rule 109 (produce_term_quad -> .)
    DIV             reduce using rule 109 (produce_term_quad -> .)
    ADD             reduce using rule 109 (produce_term_quad -> .)
    SUB             reduce using rule 109 (produce_term_quad -> .)
    COMMA           reduce using rule 109 (produce_term_quad -> .)
    SEMICOLON       reduce using rule 109 (produce_term_quad -> .)
    RSQBRACKET      reduce using rule 109 (produce_term_quad -> .)
    LTHAN           reduce using rule 109 (produce_term_quad -> .)
    GTHAN           reduce using rule 109 (produce_term_quad -> .)
    EQUAL           reduce using rule 109 (produce_term_quad -> .)
    DIFFERENT       reduce using rule 109 (produce_term_quad -> .)
    AND             reduce using rule 109 (produce_term_quad -> .)
    OR              reduce using rule 109 (produce_term_quad -> .)
    RPAREN          reduce using rule 109 (produce_term_quad -> .)

    produce_term_quad              shift and go to state 121

state 85

    (110) factor -> identifier .
    (122) array_access -> identifier . lsqbracket expression array_rsqbracket
    (123) matrix_access -> identifier . lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2
    (124) lsqbracket -> . LSQBRACKET

    MUL             reduce using rule 110 (factor -> identifier .)
    DIV             reduce using rule 110 (factor -> identifier .)
    ADD             reduce using rule 110 (factor -> identifier .)
    SUB             reduce using rule 110 (factor -> identifier .)
    COMMA           reduce using rule 110 (factor -> identifier .)
    SEMICOLON       reduce using rule 110 (factor -> identifier .)
    RSQBRACKET      reduce using rule 110 (factor -> identifier .)
    LTHAN           reduce using rule 110 (factor -> identifier .)
    GTHAN           reduce using rule 110 (factor -> identifier .)
    EQUAL           reduce using rule 110 (factor -> identifier .)
    DIFFERENT       reduce using rule 110 (factor -> identifier .)
    AND             reduce using rule 110 (factor -> identifier .)
    OR              reduce using rule 110 (factor -> identifier .)
    RPAREN          reduce using rule 110 (factor -> identifier .)
    LSQBRACKET      shift and go to state 62

    lsqbracket                     shift and go to state 61

state 86

    (111) factor -> const_int .

    MUL             reduce using rule 111 (factor -> const_int .)
    DIV             reduce using rule 111 (factor -> const_int .)
    ADD             reduce using rule 111 (factor -> const_int .)
    SUB             reduce using rule 111 (factor -> const_int .)
    COMMA           reduce using rule 111 (factor -> const_int .)
    SEMICOLON       reduce using rule 111 (factor -> const_int .)
    RSQBRACKET      reduce using rule 111 (factor -> const_int .)
    LTHAN           reduce using rule 111 (factor -> const_int .)
    GTHAN           reduce using rule 111 (factor -> const_int .)
    EQUAL           reduce using rule 111 (factor -> const_int .)
    DIFFERENT       reduce using rule 111 (factor -> const_int .)
    AND             reduce using rule 111 (factor -> const_int .)
    OR              reduce using rule 111 (factor -> const_int .)
    RPAREN          reduce using rule 111 (factor -> const_int .)


state 87

    (112) factor -> const_float .

    MUL             reduce using rule 112 (factor -> const_float .)
    DIV             reduce using rule 112 (factor -> const_float .)
    ADD             reduce using rule 112 (factor -> const_float .)
    SUB             reduce using rule 112 (factor -> const_float .)
    COMMA           reduce using rule 112 (factor -> const_float .)
    SEMICOLON       reduce using rule 112 (factor -> const_float .)
    RSQBRACKET      reduce using rule 112 (factor -> const_float .)
    LTHAN           reduce using rule 112 (factor -> const_float .)
    GTHAN           reduce using rule 112 (factor -> const_float .)
    EQUAL           reduce using rule 112 (factor -> const_float .)
    DIFFERENT       reduce using rule 112 (factor -> const_float .)
    AND             reduce using rule 112 (factor -> const_float .)
    OR              reduce using rule 112 (factor -> const_float .)
    RPAREN          reduce using rule 112 (factor -> const_float .)


state 88

    (113) factor -> LPAREN . push_cap expression RPAREN pop_cap
    (120) push_cap -> .

    LPAREN          reduce using rule 120 (push_cap -> .)
    ID              reduce using rule 120 (push_cap -> .)
    CONST_INT       reduce using rule 120 (push_cap -> .)
    CONST_FLOAT     reduce using rule 120 (push_cap -> .)

    push_cap                       shift and go to state 122

state 89

    (114) factor -> array_access .

    MUL             reduce using rule 114 (factor -> array_access .)
    DIV             reduce using rule 114 (factor -> array_access .)
    ADD             reduce using rule 114 (factor -> array_access .)
    SUB             reduce using rule 114 (factor -> array_access .)
    COMMA           reduce using rule 114 (factor -> array_access .)
    SEMICOLON       reduce using rule 114 (factor -> array_access .)
    RSQBRACKET      reduce using rule 114 (factor -> array_access .)
    LTHAN           reduce using rule 114 (factor -> array_access .)
    GTHAN           reduce using rule 114 (factor -> array_access .)
    EQUAL           reduce using rule 114 (factor -> array_access .)
    DIFFERENT       reduce using rule 114 (factor -> array_access .)
    AND             reduce using rule 114 (factor -> array_access .)
    OR              reduce using rule 114 (factor -> array_access .)
    RPAREN          reduce using rule 114 (factor -> array_access .)


state 90

    (115) factor -> matrix_access .

    MUL             reduce using rule 115 (factor -> matrix_access .)
    DIV             reduce using rule 115 (factor -> matrix_access .)
    ADD             reduce using rule 115 (factor -> matrix_access .)
    SUB             reduce using rule 115 (factor -> matrix_access .)
    COMMA           reduce using rule 115 (factor -> matrix_access .)
    SEMICOLON       reduce using rule 115 (factor -> matrix_access .)
    RSQBRACKET      reduce using rule 115 (factor -> matrix_access .)
    LTHAN           reduce using rule 115 (factor -> matrix_access .)
    GTHAN           reduce using rule 115 (factor -> matrix_access .)
    EQUAL           reduce using rule 115 (factor -> matrix_access .)
    DIFFERENT       reduce using rule 115 (factor -> matrix_access .)
    AND             reduce using rule 115 (factor -> matrix_access .)
    OR              reduce using rule 115 (factor -> matrix_access .)
    RPAREN          reduce using rule 115 (factor -> matrix_access .)


state 91

    (116) factor -> function_call .

    MUL             reduce using rule 116 (factor -> function_call .)
    DIV             reduce using rule 116 (factor -> function_call .)
    ADD             reduce using rule 116 (factor -> function_call .)
    SUB             reduce using rule 116 (factor -> function_call .)
    COMMA           reduce using rule 116 (factor -> function_call .)
    SEMICOLON       reduce using rule 116 (factor -> function_call .)
    RSQBRACKET      reduce using rule 116 (factor -> function_call .)
    LTHAN           reduce using rule 116 (factor -> function_call .)
    GTHAN           reduce using rule 116 (factor -> function_call .)
    EQUAL           reduce using rule 116 (factor -> function_call .)
    DIFFERENT       reduce using rule 116 (factor -> function_call .)
    AND             reduce using rule 116 (factor -> function_call .)
    OR              reduce using rule 116 (factor -> function_call .)
    RPAREN          reduce using rule 116 (factor -> function_call .)


state 92

    (117) identifier -> ID .
    (82) function_call -> ID . function_call_check function_call_lparen call_params0 function_call_rparen
    (83) function_call_check -> .

    LSQBRACKET      reduce using rule 117 (identifier -> ID .)
    MUL             reduce using rule 117 (identifier -> ID .)
    DIV             reduce using rule 117 (identifier -> ID .)
    ADD             reduce using rule 117 (identifier -> ID .)
    SUB             reduce using rule 117 (identifier -> ID .)
    COMMA           reduce using rule 117 (identifier -> ID .)
    SEMICOLON       reduce using rule 117 (identifier -> ID .)
    RSQBRACKET      reduce using rule 117 (identifier -> ID .)
    LTHAN           reduce using rule 117 (identifier -> ID .)
    GTHAN           reduce using rule 117 (identifier -> ID .)
    EQUAL           reduce using rule 117 (identifier -> ID .)
    DIFFERENT       reduce using rule 117 (identifier -> ID .)
    AND             reduce using rule 117 (identifier -> ID .)
    OR              reduce using rule 117 (identifier -> ID .)
    RPAREN          reduce using rule 117 (identifier -> ID .)
    LPAREN          reduce using rule 83 (function_call_check -> .)

    function_call_check            shift and go to state 66

state 93

    (118) const_int -> CONST_INT .

    MUL             reduce using rule 118 (const_int -> CONST_INT .)
    DIV             reduce using rule 118 (const_int -> CONST_INT .)
    ADD             reduce using rule 118 (const_int -> CONST_INT .)
    SUB             reduce using rule 118 (const_int -> CONST_INT .)
    COMMA           reduce using rule 118 (const_int -> CONST_INT .)
    SEMICOLON       reduce using rule 118 (const_int -> CONST_INT .)
    RSQBRACKET      reduce using rule 118 (const_int -> CONST_INT .)
    LTHAN           reduce using rule 118 (const_int -> CONST_INT .)
    GTHAN           reduce using rule 118 (const_int -> CONST_INT .)
    EQUAL           reduce using rule 118 (const_int -> CONST_INT .)
    DIFFERENT       reduce using rule 118 (const_int -> CONST_INT .)
    AND             reduce using rule 118 (const_int -> CONST_INT .)
    OR              reduce using rule 118 (const_int -> CONST_INT .)
    RPAREN          reduce using rule 118 (const_int -> CONST_INT .)


state 94

    (119) const_float -> CONST_FLOAT .

    MUL             reduce using rule 119 (const_float -> CONST_FLOAT .)
    DIV             reduce using rule 119 (const_float -> CONST_FLOAT .)
    ADD             reduce using rule 119 (const_float -> CONST_FLOAT .)
    SUB             reduce using rule 119 (const_float -> CONST_FLOAT .)
    COMMA           reduce using rule 119 (const_float -> CONST_FLOAT .)
    SEMICOLON       reduce using rule 119 (const_float -> CONST_FLOAT .)
    RSQBRACKET      reduce using rule 119 (const_float -> CONST_FLOAT .)
    LTHAN           reduce using rule 119 (const_float -> CONST_FLOAT .)
    GTHAN           reduce using rule 119 (const_float -> CONST_FLOAT .)
    EQUAL           reduce using rule 119 (const_float -> CONST_FLOAT .)
    DIFFERENT       reduce using rule 119 (const_float -> CONST_FLOAT .)
    AND             reduce using rule 119 (const_float -> CONST_FLOAT .)
    OR              reduce using rule 119 (const_float -> CONST_FLOAT .)
    RPAREN          reduce using rule 119 (const_float -> CONST_FLOAT .)


state 95

    (63) read -> READ push_operator identifier .

    SEMICOLON       reduce using rule 63 (read -> READ push_operator identifier .)


state 96

    (117) identifier -> ID .

    SEMICOLON       reduce using rule 117 (identifier -> ID .)


state 97

    (67) simple_assignment -> identifier ASSIGN push_operator . expression
    (99) expression -> . expression ADD push_operator expression
    (100) expression -> . expression SUB push_operator expression
    (101) expression -> . term produce_exp_quad
    (102) term -> . term MUL push_operator term
    (103) term -> . term DIV push_operator term
    (104) term -> . factor produce_term_quad
    (110) factor -> . identifier
    (111) factor -> . const_int
    (112) factor -> . const_float
    (113) factor -> . LPAREN push_cap expression RPAREN pop_cap
    (114) factor -> . array_access
    (115) factor -> . matrix_access
    (116) factor -> . function_call
    (117) identifier -> . ID
    (118) const_int -> . CONST_INT
    (119) const_float -> . CONST_FLOAT
    (122) array_access -> . identifier lsqbracket expression array_rsqbracket
    (123) matrix_access -> . identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2
    (82) function_call -> . ID function_call_check function_call_lparen call_params0 function_call_rparen

    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_FLOAT     shift and go to state 94

    identifier                     shift and go to state 85
    expression                     shift and go to state 123
    term                           shift and go to state 82
    factor                         shift and go to state 84
    const_int                      shift and go to state 86
    const_float                    shift and go to state 87
    array_access                   shift and go to state 89
    matrix_access                  shift and go to state 90
    function_call                  shift and go to state 91

state 98

    (122) array_access -> identifier lsqbracket expression . array_rsqbracket
    (123) matrix_access -> identifier lsqbracket expression . matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2
    (99) expression -> expression . ADD push_operator expression
    (100) expression -> expression . SUB push_operator expression
    (125) array_rsqbracket -> . RSQBRACKET
    (126) matrix_rsqbracket_1 -> . RSQBRACKET

    ADD             shift and go to state 115
    SUB             shift and go to state 116
    RSQBRACKET      shift and go to state 126

    array_rsqbracket               shift and go to state 124
    matrix_rsqbracket_1            shift and go to state 125

state 99

    (70) condition -> IF cond_lparen hyper_expression . cond_rparen LBRACKET statements RBRACKET fill_pending_jump
    (71) condition -> IF cond_lparen hyper_expression . cond_rparen LBRACKET statements RBRACKET else LBRACKET statements RBRACKET fill_pending_jump
    (91) hyper_expression -> hyper_expression . AND push_operator hyper_expression
    (92) hyper_expression -> hyper_expression . OR push_operator hyper_expression
    (75) cond_rparen -> . RPAREN

    AND             shift and go to state 128
    OR              shift and go to state 129
    RPAREN          shift and go to state 130

    cond_rparen                    shift and go to state 127

state 100

    (93) hyper_expression -> super_expression . produce_hyperexp_quad
    (94) super_expression -> super_expression . LTHAN push_operator super_expression
    (95) super_expression -> super_expression . GTHAN push_operator super_expression
    (96) super_expression -> super_expression . EQUAL push_operator super_expression
    (97) super_expression -> super_expression . DIFFERENT push_operator super_expression
    (106) produce_hyperexp_quad -> .

    LTHAN           shift and go to state 132
    GTHAN           shift and go to state 133
    EQUAL           shift and go to state 134
    DIFFERENT       shift and go to state 135
    AND             reduce using rule 106 (produce_hyperexp_quad -> .)
    OR              reduce using rule 106 (produce_hyperexp_quad -> .)
    RPAREN          reduce using rule 106 (produce_hyperexp_quad -> .)
    COMMA           reduce using rule 106 (produce_hyperexp_quad -> .)

    produce_hyperexp_quad          shift and go to state 131

state 101

    (98) super_expression -> expression . produce_superexp_quad
    (99) expression -> expression . ADD push_operator expression
    (100) expression -> expression . SUB push_operator expression
    (107) produce_superexp_quad -> .

    ADD             shift and go to state 115
    SUB             shift and go to state 116
    LTHAN           reduce using rule 107 (produce_superexp_quad -> .)
    GTHAN           reduce using rule 107 (produce_superexp_quad -> .)
    EQUAL           reduce using rule 107 (produce_superexp_quad -> .)
    DIFFERENT       reduce using rule 107 (produce_superexp_quad -> .)
    AND             reduce using rule 107 (produce_superexp_quad -> .)
    OR              reduce using rule 107 (produce_superexp_quad -> .)
    RPAREN          reduce using rule 107 (produce_superexp_quad -> .)
    COMMA           reduce using rule 107 (produce_superexp_quad -> .)

    produce_superexp_quad          shift and go to state 136

state 102

    (78) loop -> repeat cond_lparen hyper_expression . cond_rparen LBRACKET statements RBRACKET fill_returning_jump
    (91) hyper_expression -> hyper_expression . AND push_operator hyper_expression
    (92) hyper_expression -> hyper_expression . OR push_operator hyper_expression
    (75) cond_rparen -> . RPAREN

    AND             shift and go to state 128
    OR              shift and go to state 129
    RPAREN          shift and go to state 130

    cond_rparen                    shift and go to state 137

state 103

    (82) function_call -> ID function_call_check function_call_lparen . call_params0 function_call_rparen
    (86) call_params0 -> . hyper_expression handle_call_param call_params1
    (87) call_params0 -> . empty
    (91) hyper_expression -> . hyper_expression AND push_operator hyper_expression
    (92) hyper_expression -> . hyper_expression OR push_operator hyper_expression
    (93) hyper_expression -> . super_expression produce_hyperexp_quad
    (131) empty -> .
    (94) super_expression -> . super_expression LTHAN push_operator super_expression
    (95) super_expression -> . super_expression GTHAN push_operator super_expression
    (96) super_expression -> . super_expression EQUAL push_operator super_expression
    (97) super_expression -> . super_expression DIFFERENT push_operator super_expression
    (98) super_expression -> . expression produce_superexp_quad
    (99) expression -> . expression ADD push_operator expression
    (100) expression -> . expression SUB push_operator expression
    (101) expression -> . term produce_exp_quad
    (102) term -> . term MUL push_operator term
    (103) term -> . term DIV push_operator term
    (104) term -> . factor produce_term_quad
    (110) factor -> . identifier
    (111) factor -> . const_int
    (112) factor -> . const_float
    (113) factor -> . LPAREN push_cap expression RPAREN pop_cap
    (114) factor -> . array_access
    (115) factor -> . matrix_access
    (116) factor -> . function_call
    (117) identifier -> . ID
    (118) const_int -> . CONST_INT
    (119) const_float -> . CONST_FLOAT
    (122) array_access -> . identifier lsqbracket expression array_rsqbracket
    (123) matrix_access -> . identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2
    (82) function_call -> . ID function_call_check function_call_lparen call_params0 function_call_rparen

    RPAREN          reduce using rule 131 (empty -> .)
    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_FLOAT     shift and go to state 94

    call_params0                   shift and go to state 138
    hyper_expression               shift and go to state 139
    empty                          shift and go to state 140
    super_expression               shift and go to state 100
    expression                     shift and go to state 101
    term                           shift and go to state 82
    factor                         shift and go to state 84
    identifier                     shift and go to state 85
    const_int                      shift and go to state 86
    const_float                    shift and go to state 87
    array_access                   shift and go to state 89
    matrix_access                  shift and go to state 90
    function_call                  shift and go to state 91

state 104

    (84) function_call_lparen -> LPAREN .

    LPAREN          reduce using rule 84 (function_call_lparen -> LPAREN .)
    ID              reduce using rule 84 (function_call_lparen -> LPAREN .)
    CONST_INT       reduce using rule 84 (function_call_lparen -> LPAREN .)
    CONST_FLOAT     reduce using rule 84 (function_call_lparen -> LPAREN .)
    RPAREN          reduce using rule 84 (function_call_lparen -> LPAREN .)


state 105

    (68) array_assignment -> array_access ASSIGN push_operator . expression
    (99) expression -> . expression ADD push_operator expression
    (100) expression -> . expression SUB push_operator expression
    (101) expression -> . term produce_exp_quad
    (102) term -> . term MUL push_operator term
    (103) term -> . term DIV push_operator term
    (104) term -> . factor produce_term_quad
    (110) factor -> . identifier
    (111) factor -> . const_int
    (112) factor -> . const_float
    (113) factor -> . LPAREN push_cap expression RPAREN pop_cap
    (114) factor -> . array_access
    (115) factor -> . matrix_access
    (116) factor -> . function_call
    (117) identifier -> . ID
    (118) const_int -> . CONST_INT
    (119) const_float -> . CONST_FLOAT
    (122) array_access -> . identifier lsqbracket expression array_rsqbracket
    (123) matrix_access -> . identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2
    (82) function_call -> . ID function_call_check function_call_lparen call_params0 function_call_rparen

    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_FLOAT     shift and go to state 94

    array_access                   shift and go to state 89
    expression                     shift and go to state 141
    term                           shift and go to state 82
    factor                         shift and go to state 84
    identifier                     shift and go to state 85
    const_int                      shift and go to state 86
    const_float                    shift and go to state 87
    matrix_access                  shift and go to state 90
    function_call                  shift and go to state 91

state 106

    (69) matrix_assignment -> matrix_access ASSIGN push_operator . expression
    (99) expression -> . expression ADD push_operator expression
    (100) expression -> . expression SUB push_operator expression
    (101) expression -> . term produce_exp_quad
    (102) term -> . term MUL push_operator term
    (103) term -> . term DIV push_operator term
    (104) term -> . factor produce_term_quad
    (110) factor -> . identifier
    (111) factor -> . const_int
    (112) factor -> . const_float
    (113) factor -> . LPAREN push_cap expression RPAREN pop_cap
    (114) factor -> . array_access
    (115) factor -> . matrix_access
    (116) factor -> . function_call
    (117) identifier -> . ID
    (118) const_int -> . CONST_INT
    (119) const_float -> . CONST_FLOAT
    (122) array_access -> . identifier lsqbracket expression array_rsqbracket
    (123) matrix_access -> . identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2
    (82) function_call -> . ID function_call_check function_call_lparen call_params0 function_call_rparen

    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_FLOAT     shift and go to state 94

    matrix_access                  shift and go to state 90
    expression                     shift and go to state 142
    term                           shift and go to state 82
    factor                         shift and go to state 84
    identifier                     shift and go to state 85
    const_int                      shift and go to state 86
    const_float                    shift and go to state 87
    array_access                   shift and go to state 89
    function_call                  shift and go to state 91

state 107

    (26) simple_declaration -> ID COLON var_type . SEMICOLON

    SEMICOLON       shift and go to state 143


state 108

    (29) var_type -> type .

    SEMICOLON       reduce using rule 29 (var_type -> type .)


state 109

    (129) type -> INT .

    SEMICOLON       reduce using rule 129 (type -> INT .)
    COMMA           reduce using rule 129 (type -> INT .)
    RPAREN          reduce using rule 129 (type -> INT .)
    LBRACKET        reduce using rule 129 (type -> INT .)


state 110

    (130) type -> FLOAT .

    SEMICOLON       reduce using rule 130 (type -> FLOAT .)
    COMMA           reduce using rule 130 (type -> FLOAT .)
    RPAREN          reduce using rule 130 (type -> FLOAT .)
    LBRACKET        reduce using rule 130 (type -> FLOAT .)


state 111

    (27) array_declaration -> ID LSQBRACKET CONST_INT . RSQBRACKET COLON type SEMICOLON
    (28) matrix_declaration -> ID LSQBRACKET CONST_INT . RSQBRACKET LSQBRACKET CONST_INT RSQBRACKET COLON type SEMICOLON

    RSQBRACKET      shift and go to state 144


state 112

    (1) routine -> routine_init ID SEMICOLON global_scope_init global_vars_block instructions_block function_block BEGIN COLON LSQBRACKET local_scope_init . local_vars_block fill_main_jump instructions_block RSQBRACKET
    (6) local_vars_block -> . LOCALS COLON var_declarations
    (7) local_vars_block -> . empty
    (131) empty -> .

    LOCALS          shift and go to state 146
    INSTRUCTIONS    reduce using rule 131 (empty -> .)
    RSQBRACKET      reduce using rule 131 (empty -> .)

    local_vars_block               shift and go to state 145
    empty                          shift and go to state 147

state 113

    (32) function_declarations -> PROC ID proc_scope_init . LPAREN params0 RPAREN COLON VOID set_return_type LBRACKET local_vars_block store_curr_ip instructions_block function_rbracket function_declarations
    (33) function_declarations -> PROC ID proc_scope_init . LPAREN params0 RPAREN COLON func_type set_return_type LBRACKET local_vars_block store_curr_ip proc_instructions_block RBRACKET function_declarations

    LPAREN          shift and go to state 148


state 114

    (55) write_params0 -> write_operator expression produce_write_quad . write_params1
    (57) write_params1 -> . COMMA write_operator expression produce_write_quad write_params1
    (58) write_params1 -> . COMMA write_operator const_text produce_write_quad write_params1
    (59) write_params1 -> . empty
    (131) empty -> .

    COMMA           shift and go to state 150
    SEMICOLON       reduce using rule 131 (empty -> .)

    write_params1                  shift and go to state 149
    empty                          shift and go to state 151

state 115

    (99) expression -> expression ADD . push_operator expression
    (105) push_operator -> .

    LPAREN          reduce using rule 105 (push_operator -> .)
    ID              reduce using rule 105 (push_operator -> .)
    CONST_INT       reduce using rule 105 (push_operator -> .)
    CONST_FLOAT     reduce using rule 105 (push_operator -> .)

    push_operator                  shift and go to state 152

state 116

    (100) expression -> expression SUB . push_operator expression
    (105) push_operator -> .

    LPAREN          reduce using rule 105 (push_operator -> .)
    ID              reduce using rule 105 (push_operator -> .)
    CONST_INT       reduce using rule 105 (push_operator -> .)
    CONST_FLOAT     reduce using rule 105 (push_operator -> .)

    push_operator                  shift and go to state 153

state 117

    (56) write_params0 -> write_operator const_text produce_write_quad . write_params1
    (57) write_params1 -> . COMMA write_operator expression produce_write_quad write_params1
    (58) write_params1 -> . COMMA write_operator const_text produce_write_quad write_params1
    (59) write_params1 -> . empty
    (131) empty -> .

    COMMA           shift and go to state 150
    SEMICOLON       reduce using rule 131 (empty -> .)

    write_params1                  shift and go to state 154
    empty                          shift and go to state 151

state 118

    (101) expression -> term produce_exp_quad .

    ADD             reduce using rule 101 (expression -> term produce_exp_quad .)
    SUB             reduce using rule 101 (expression -> term produce_exp_quad .)
    COMMA           reduce using rule 101 (expression -> term produce_exp_quad .)
    SEMICOLON       reduce using rule 101 (expression -> term produce_exp_quad .)
    RSQBRACKET      reduce using rule 101 (expression -> term produce_exp_quad .)
    LTHAN           reduce using rule 101 (expression -> term produce_exp_quad .)
    GTHAN           reduce using rule 101 (expression -> term produce_exp_quad .)
    EQUAL           reduce using rule 101 (expression -> term produce_exp_quad .)
    DIFFERENT       reduce using rule 101 (expression -> term produce_exp_quad .)
    AND             reduce using rule 101 (expression -> term produce_exp_quad .)
    OR              reduce using rule 101 (expression -> term produce_exp_quad .)
    RPAREN          reduce using rule 101 (expression -> term produce_exp_quad .)


state 119

    (102) term -> term MUL . push_operator term
    (105) push_operator -> .

    LPAREN          reduce using rule 105 (push_operator -> .)
    ID              reduce using rule 105 (push_operator -> .)
    CONST_INT       reduce using rule 105 (push_operator -> .)
    CONST_FLOAT     reduce using rule 105 (push_operator -> .)

    push_operator                  shift and go to state 155

state 120

    (103) term -> term DIV . push_operator term
    (105) push_operator -> .

    LPAREN          reduce using rule 105 (push_operator -> .)
    ID              reduce using rule 105 (push_operator -> .)
    CONST_INT       reduce using rule 105 (push_operator -> .)
    CONST_FLOAT     reduce using rule 105 (push_operator -> .)

    push_operator                  shift and go to state 156

state 121

    (104) term -> factor produce_term_quad .

    MUL             reduce using rule 104 (term -> factor produce_term_quad .)
    DIV             reduce using rule 104 (term -> factor produce_term_quad .)
    ADD             reduce using rule 104 (term -> factor produce_term_quad .)
    SUB             reduce using rule 104 (term -> factor produce_term_quad .)
    COMMA           reduce using rule 104 (term -> factor produce_term_quad .)
    SEMICOLON       reduce using rule 104 (term -> factor produce_term_quad .)
    RSQBRACKET      reduce using rule 104 (term -> factor produce_term_quad .)
    LTHAN           reduce using rule 104 (term -> factor produce_term_quad .)
    GTHAN           reduce using rule 104 (term -> factor produce_term_quad .)
    EQUAL           reduce using rule 104 (term -> factor produce_term_quad .)
    DIFFERENT       reduce using rule 104 (term -> factor produce_term_quad .)
    AND             reduce using rule 104 (term -> factor produce_term_quad .)
    OR              reduce using rule 104 (term -> factor produce_term_quad .)
    RPAREN          reduce using rule 104 (term -> factor produce_term_quad .)


state 122

    (113) factor -> LPAREN push_cap . expression RPAREN pop_cap
    (99) expression -> . expression ADD push_operator expression
    (100) expression -> . expression SUB push_operator expression
    (101) expression -> . term produce_exp_quad
    (102) term -> . term MUL push_operator term
    (103) term -> . term DIV push_operator term
    (104) term -> . factor produce_term_quad
    (110) factor -> . identifier
    (111) factor -> . const_int
    (112) factor -> . const_float
    (113) factor -> . LPAREN push_cap expression RPAREN pop_cap
    (114) factor -> . array_access
    (115) factor -> . matrix_access
    (116) factor -> . function_call
    (117) identifier -> . ID
    (118) const_int -> . CONST_INT
    (119) const_float -> . CONST_FLOAT
    (122) array_access -> . identifier lsqbracket expression array_rsqbracket
    (123) matrix_access -> . identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2
    (82) function_call -> . ID function_call_check function_call_lparen call_params0 function_call_rparen

    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_FLOAT     shift and go to state 94

    expression                     shift and go to state 157
    term                           shift and go to state 82
    factor                         shift and go to state 84
    identifier                     shift and go to state 85
    const_int                      shift and go to state 86
    const_float                    shift and go to state 87
    array_access                   shift and go to state 89
    matrix_access                  shift and go to state 90
    function_call                  shift and go to state 91

state 123

    (67) simple_assignment -> identifier ASSIGN push_operator expression .
    (99) expression -> expression . ADD push_operator expression
    (100) expression -> expression . SUB push_operator expression

    SEMICOLON       reduce using rule 67 (simple_assignment -> identifier ASSIGN push_operator expression .)
    ADD             shift and go to state 115
    SUB             shift and go to state 116


state 124

    (122) array_access -> identifier lsqbracket expression array_rsqbracket .

    ASSIGN          reduce using rule 122 (array_access -> identifier lsqbracket expression array_rsqbracket .)
    MUL             reduce using rule 122 (array_access -> identifier lsqbracket expression array_rsqbracket .)
    DIV             reduce using rule 122 (array_access -> identifier lsqbracket expression array_rsqbracket .)
    ADD             reduce using rule 122 (array_access -> identifier lsqbracket expression array_rsqbracket .)
    SUB             reduce using rule 122 (array_access -> identifier lsqbracket expression array_rsqbracket .)
    COMMA           reduce using rule 122 (array_access -> identifier lsqbracket expression array_rsqbracket .)
    SEMICOLON       reduce using rule 122 (array_access -> identifier lsqbracket expression array_rsqbracket .)
    RSQBRACKET      reduce using rule 122 (array_access -> identifier lsqbracket expression array_rsqbracket .)
    LTHAN           reduce using rule 122 (array_access -> identifier lsqbracket expression array_rsqbracket .)
    GTHAN           reduce using rule 122 (array_access -> identifier lsqbracket expression array_rsqbracket .)
    EQUAL           reduce using rule 122 (array_access -> identifier lsqbracket expression array_rsqbracket .)
    DIFFERENT       reduce using rule 122 (array_access -> identifier lsqbracket expression array_rsqbracket .)
    AND             reduce using rule 122 (array_access -> identifier lsqbracket expression array_rsqbracket .)
    OR              reduce using rule 122 (array_access -> identifier lsqbracket expression array_rsqbracket .)
    RPAREN          reduce using rule 122 (array_access -> identifier lsqbracket expression array_rsqbracket .)


state 125

    (123) matrix_access -> identifier lsqbracket expression matrix_rsqbracket_1 . matrix_lsqbracket_2 expression matrix_rsqbracket_2
    (127) matrix_lsqbracket_2 -> . LSQBRACKET

    LSQBRACKET      shift and go to state 159

    matrix_lsqbracket_2            shift and go to state 158

state 126

    (125) array_rsqbracket -> RSQBRACKET .
    (126) matrix_rsqbracket_1 -> RSQBRACKET .

    ASSIGN          reduce using rule 125 (array_rsqbracket -> RSQBRACKET .)
    MUL             reduce using rule 125 (array_rsqbracket -> RSQBRACKET .)
    DIV             reduce using rule 125 (array_rsqbracket -> RSQBRACKET .)
    ADD             reduce using rule 125 (array_rsqbracket -> RSQBRACKET .)
    SUB             reduce using rule 125 (array_rsqbracket -> RSQBRACKET .)
    COMMA           reduce using rule 125 (array_rsqbracket -> RSQBRACKET .)
    SEMICOLON       reduce using rule 125 (array_rsqbracket -> RSQBRACKET .)
    RSQBRACKET      reduce using rule 125 (array_rsqbracket -> RSQBRACKET .)
    LTHAN           reduce using rule 125 (array_rsqbracket -> RSQBRACKET .)
    GTHAN           reduce using rule 125 (array_rsqbracket -> RSQBRACKET .)
    EQUAL           reduce using rule 125 (array_rsqbracket -> RSQBRACKET .)
    DIFFERENT       reduce using rule 125 (array_rsqbracket -> RSQBRACKET .)
    AND             reduce using rule 125 (array_rsqbracket -> RSQBRACKET .)
    OR              reduce using rule 125 (array_rsqbracket -> RSQBRACKET .)
    RPAREN          reduce using rule 125 (array_rsqbracket -> RSQBRACKET .)
    LSQBRACKET      reduce using rule 126 (matrix_rsqbracket_1 -> RSQBRACKET .)


state 127

    (70) condition -> IF cond_lparen hyper_expression cond_rparen . LBRACKET statements RBRACKET fill_pending_jump
    (71) condition -> IF cond_lparen hyper_expression cond_rparen . LBRACKET statements RBRACKET else LBRACKET statements RBRACKET fill_pending_jump

    LBRACKET        shift and go to state 160


state 128

    (91) hyper_expression -> hyper_expression AND . push_operator hyper_expression
    (105) push_operator -> .

    LPAREN          reduce using rule 105 (push_operator -> .)
    ID              reduce using rule 105 (push_operator -> .)
    CONST_INT       reduce using rule 105 (push_operator -> .)
    CONST_FLOAT     reduce using rule 105 (push_operator -> .)

    push_operator                  shift and go to state 161

state 129

    (92) hyper_expression -> hyper_expression OR . push_operator hyper_expression
    (105) push_operator -> .

    LPAREN          reduce using rule 105 (push_operator -> .)
    ID              reduce using rule 105 (push_operator -> .)
    CONST_INT       reduce using rule 105 (push_operator -> .)
    CONST_FLOAT     reduce using rule 105 (push_operator -> .)

    push_operator                  shift and go to state 162

state 130

    (75) cond_rparen -> RPAREN .

    LBRACKET        reduce using rule 75 (cond_rparen -> RPAREN .)


state 131

    (93) hyper_expression -> super_expression produce_hyperexp_quad .

    AND             reduce using rule 93 (hyper_expression -> super_expression produce_hyperexp_quad .)
    OR              reduce using rule 93 (hyper_expression -> super_expression produce_hyperexp_quad .)
    RPAREN          reduce using rule 93 (hyper_expression -> super_expression produce_hyperexp_quad .)
    COMMA           reduce using rule 93 (hyper_expression -> super_expression produce_hyperexp_quad .)


state 132

    (94) super_expression -> super_expression LTHAN . push_operator super_expression
    (105) push_operator -> .

    LPAREN          reduce using rule 105 (push_operator -> .)
    ID              reduce using rule 105 (push_operator -> .)
    CONST_INT       reduce using rule 105 (push_operator -> .)
    CONST_FLOAT     reduce using rule 105 (push_operator -> .)

    push_operator                  shift and go to state 163

state 133

    (95) super_expression -> super_expression GTHAN . push_operator super_expression
    (105) push_operator -> .

    LPAREN          reduce using rule 105 (push_operator -> .)
    ID              reduce using rule 105 (push_operator -> .)
    CONST_INT       reduce using rule 105 (push_operator -> .)
    CONST_FLOAT     reduce using rule 105 (push_operator -> .)

    push_operator                  shift and go to state 164

state 134

    (96) super_expression -> super_expression EQUAL . push_operator super_expression
    (105) push_operator -> .

    LPAREN          reduce using rule 105 (push_operator -> .)
    ID              reduce using rule 105 (push_operator -> .)
    CONST_INT       reduce using rule 105 (push_operator -> .)
    CONST_FLOAT     reduce using rule 105 (push_operator -> .)

    push_operator                  shift and go to state 165

state 135

    (97) super_expression -> super_expression DIFFERENT . push_operator super_expression
    (105) push_operator -> .

    LPAREN          reduce using rule 105 (push_operator -> .)
    ID              reduce using rule 105 (push_operator -> .)
    CONST_INT       reduce using rule 105 (push_operator -> .)
    CONST_FLOAT     reduce using rule 105 (push_operator -> .)

    push_operator                  shift and go to state 166

state 136

    (98) super_expression -> expression produce_superexp_quad .

    LTHAN           reduce using rule 98 (super_expression -> expression produce_superexp_quad .)
    GTHAN           reduce using rule 98 (super_expression -> expression produce_superexp_quad .)
    EQUAL           reduce using rule 98 (super_expression -> expression produce_superexp_quad .)
    DIFFERENT       reduce using rule 98 (super_expression -> expression produce_superexp_quad .)
    AND             reduce using rule 98 (super_expression -> expression produce_superexp_quad .)
    OR              reduce using rule 98 (super_expression -> expression produce_superexp_quad .)
    RPAREN          reduce using rule 98 (super_expression -> expression produce_superexp_quad .)
    COMMA           reduce using rule 98 (super_expression -> expression produce_superexp_quad .)


state 137

    (78) loop -> repeat cond_lparen hyper_expression cond_rparen . LBRACKET statements RBRACKET fill_returning_jump

    LBRACKET        shift and go to state 167


state 138

    (82) function_call -> ID function_call_check function_call_lparen call_params0 . function_call_rparen
    (85) function_call_rparen -> . RPAREN

    RPAREN          shift and go to state 169

    function_call_rparen           shift and go to state 168

state 139

    (86) call_params0 -> hyper_expression . handle_call_param call_params1
    (91) hyper_expression -> hyper_expression . AND push_operator hyper_expression
    (92) hyper_expression -> hyper_expression . OR push_operator hyper_expression
    (90) handle_call_param -> .

    AND             shift and go to state 128
    OR              shift and go to state 129
    COMMA           reduce using rule 90 (handle_call_param -> .)
    RPAREN          reduce using rule 90 (handle_call_param -> .)

    handle_call_param              shift and go to state 170

state 140

    (87) call_params0 -> empty .

    RPAREN          reduce using rule 87 (call_params0 -> empty .)


state 141

    (68) array_assignment -> array_access ASSIGN push_operator expression .
    (99) expression -> expression . ADD push_operator expression
    (100) expression -> expression . SUB push_operator expression

    SEMICOLON       reduce using rule 68 (array_assignment -> array_access ASSIGN push_operator expression .)
    ADD             shift and go to state 115
    SUB             shift and go to state 116


state 142

    (69) matrix_assignment -> matrix_access ASSIGN push_operator expression .
    (99) expression -> expression . ADD push_operator expression
    (100) expression -> expression . SUB push_operator expression

    SEMICOLON       reduce using rule 69 (matrix_assignment -> matrix_access ASSIGN push_operator expression .)
    ADD             shift and go to state 115
    SUB             shift and go to state 116


state 143

    (26) simple_declaration -> ID COLON var_type SEMICOLON .

    VAR             reduce using rule 26 (simple_declaration -> ID COLON var_type SEMICOLON .)
    INSTRUCTIONS    reduce using rule 26 (simple_declaration -> ID COLON var_type SEMICOLON .)
    PROCEDURES      reduce using rule 26 (simple_declaration -> ID COLON var_type SEMICOLON .)
    BEGIN           reduce using rule 26 (simple_declaration -> ID COLON var_type SEMICOLON .)
    RSQBRACKET      reduce using rule 26 (simple_declaration -> ID COLON var_type SEMICOLON .)
    RBRACKET        reduce using rule 26 (simple_declaration -> ID COLON var_type SEMICOLON .)


state 144

    (27) array_declaration -> ID LSQBRACKET CONST_INT RSQBRACKET . COLON type SEMICOLON
    (28) matrix_declaration -> ID LSQBRACKET CONST_INT RSQBRACKET . LSQBRACKET CONST_INT RSQBRACKET COLON type SEMICOLON

    COLON           shift and go to state 172
    LSQBRACKET      shift and go to state 171


state 145

    (1) routine -> routine_init ID SEMICOLON global_scope_init global_vars_block instructions_block function_block BEGIN COLON LSQBRACKET local_scope_init local_vars_block . fill_main_jump instructions_block RSQBRACKET
    (3) fill_main_jump -> .

    INSTRUCTIONS    reduce using rule 3 (fill_main_jump -> .)
    RSQBRACKET      reduce using rule 3 (fill_main_jump -> .)

    fill_main_jump                 shift and go to state 173

state 146

    (6) local_vars_block -> LOCALS . COLON var_declarations

    COLON           shift and go to state 174


state 147

    (7) local_vars_block -> empty .

    INSTRUCTIONS    reduce using rule 7 (local_vars_block -> empty .)
    RSQBRACKET      reduce using rule 7 (local_vars_block -> empty .)
    RBRACKET        reduce using rule 7 (local_vars_block -> empty .)


state 148

    (32) function_declarations -> PROC ID proc_scope_init LPAREN . params0 RPAREN COLON VOID set_return_type LBRACKET local_vars_block store_curr_ip instructions_block function_rbracket function_declarations
    (33) function_declarations -> PROC ID proc_scope_init LPAREN . params0 RPAREN COLON func_type set_return_type LBRACKET local_vars_block store_curr_ip proc_instructions_block RBRACKET function_declarations
    (42) params0 -> . param params1
    (43) params0 -> . empty
    (46) param -> . ID COLON type
    (131) empty -> .

    ID              shift and go to state 175
    RPAREN          reduce using rule 131 (empty -> .)

    params0                        shift and go to state 176
    param                          shift and go to state 177
    empty                          shift and go to state 178

state 149

    (55) write_params0 -> write_operator expression produce_write_quad write_params1 .

    SEMICOLON       reduce using rule 55 (write_params0 -> write_operator expression produce_write_quad write_params1 .)


state 150

    (57) write_params1 -> COMMA . write_operator expression produce_write_quad write_params1
    (58) write_params1 -> COMMA . write_operator const_text produce_write_quad write_params1
    (61) write_operator -> .

    CONST_TEXT      reduce using rule 61 (write_operator -> .)
    LPAREN          reduce using rule 61 (write_operator -> .)
    ID              reduce using rule 61 (write_operator -> .)
    CONST_INT       reduce using rule 61 (write_operator -> .)
    CONST_FLOAT     reduce using rule 61 (write_operator -> .)

    write_operator                 shift and go to state 179

state 151

    (59) write_params1 -> empty .

    SEMICOLON       reduce using rule 59 (write_params1 -> empty .)


state 152

    (99) expression -> expression ADD push_operator . expression
    (99) expression -> . expression ADD push_operator expression
    (100) expression -> . expression SUB push_operator expression
    (101) expression -> . term produce_exp_quad
    (102) term -> . term MUL push_operator term
    (103) term -> . term DIV push_operator term
    (104) term -> . factor produce_term_quad
    (110) factor -> . identifier
    (111) factor -> . const_int
    (112) factor -> . const_float
    (113) factor -> . LPAREN push_cap expression RPAREN pop_cap
    (114) factor -> . array_access
    (115) factor -> . matrix_access
    (116) factor -> . function_call
    (117) identifier -> . ID
    (118) const_int -> . CONST_INT
    (119) const_float -> . CONST_FLOAT
    (122) array_access -> . identifier lsqbracket expression array_rsqbracket
    (123) matrix_access -> . identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2
    (82) function_call -> . ID function_call_check function_call_lparen call_params0 function_call_rparen

    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_FLOAT     shift and go to state 94

    expression                     shift and go to state 180
    term                           shift and go to state 82
    factor                         shift and go to state 84
    identifier                     shift and go to state 85
    const_int                      shift and go to state 86
    const_float                    shift and go to state 87
    array_access                   shift and go to state 89
    matrix_access                  shift and go to state 90
    function_call                  shift and go to state 91

state 153

    (100) expression -> expression SUB push_operator . expression
    (99) expression -> . expression ADD push_operator expression
    (100) expression -> . expression SUB push_operator expression
    (101) expression -> . term produce_exp_quad
    (102) term -> . term MUL push_operator term
    (103) term -> . term DIV push_operator term
    (104) term -> . factor produce_term_quad
    (110) factor -> . identifier
    (111) factor -> . const_int
    (112) factor -> . const_float
    (113) factor -> . LPAREN push_cap expression RPAREN pop_cap
    (114) factor -> . array_access
    (115) factor -> . matrix_access
    (116) factor -> . function_call
    (117) identifier -> . ID
    (118) const_int -> . CONST_INT
    (119) const_float -> . CONST_FLOAT
    (122) array_access -> . identifier lsqbracket expression array_rsqbracket
    (123) matrix_access -> . identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2
    (82) function_call -> . ID function_call_check function_call_lparen call_params0 function_call_rparen

    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_FLOAT     shift and go to state 94

    expression                     shift and go to state 181
    term                           shift and go to state 82
    factor                         shift and go to state 84
    identifier                     shift and go to state 85
    const_int                      shift and go to state 86
    const_float                    shift and go to state 87
    array_access                   shift and go to state 89
    matrix_access                  shift and go to state 90
    function_call                  shift and go to state 91

state 154

    (56) write_params0 -> write_operator const_text produce_write_quad write_params1 .

    SEMICOLON       reduce using rule 56 (write_params0 -> write_operator const_text produce_write_quad write_params1 .)


state 155

    (102) term -> term MUL push_operator . term
    (102) term -> . term MUL push_operator term
    (103) term -> . term DIV push_operator term
    (104) term -> . factor produce_term_quad
    (110) factor -> . identifier
    (111) factor -> . const_int
    (112) factor -> . const_float
    (113) factor -> . LPAREN push_cap expression RPAREN pop_cap
    (114) factor -> . array_access
    (115) factor -> . matrix_access
    (116) factor -> . function_call
    (117) identifier -> . ID
    (118) const_int -> . CONST_INT
    (119) const_float -> . CONST_FLOAT
    (122) array_access -> . identifier lsqbracket expression array_rsqbracket
    (123) matrix_access -> . identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2
    (82) function_call -> . ID function_call_check function_call_lparen call_params0 function_call_rparen

    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_FLOAT     shift and go to state 94

    term                           shift and go to state 182
    factor                         shift and go to state 84
    identifier                     shift and go to state 85
    const_int                      shift and go to state 86
    const_float                    shift and go to state 87
    array_access                   shift and go to state 89
    matrix_access                  shift and go to state 90
    function_call                  shift and go to state 91

state 156

    (103) term -> term DIV push_operator . term
    (102) term -> . term MUL push_operator term
    (103) term -> . term DIV push_operator term
    (104) term -> . factor produce_term_quad
    (110) factor -> . identifier
    (111) factor -> . const_int
    (112) factor -> . const_float
    (113) factor -> . LPAREN push_cap expression RPAREN pop_cap
    (114) factor -> . array_access
    (115) factor -> . matrix_access
    (116) factor -> . function_call
    (117) identifier -> . ID
    (118) const_int -> . CONST_INT
    (119) const_float -> . CONST_FLOAT
    (122) array_access -> . identifier lsqbracket expression array_rsqbracket
    (123) matrix_access -> . identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2
    (82) function_call -> . ID function_call_check function_call_lparen call_params0 function_call_rparen

    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_FLOAT     shift and go to state 94

    term                           shift and go to state 183
    factor                         shift and go to state 84
    identifier                     shift and go to state 85
    const_int                      shift and go to state 86
    const_float                    shift and go to state 87
    array_access                   shift and go to state 89
    matrix_access                  shift and go to state 90
    function_call                  shift and go to state 91

state 157

    (113) factor -> LPAREN push_cap expression . RPAREN pop_cap
    (99) expression -> expression . ADD push_operator expression
    (100) expression -> expression . SUB push_operator expression

    RPAREN          shift and go to state 184
    ADD             shift and go to state 115
    SUB             shift and go to state 116


state 158

    (123) matrix_access -> identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 . expression matrix_rsqbracket_2
    (99) expression -> . expression ADD push_operator expression
    (100) expression -> . expression SUB push_operator expression
    (101) expression -> . term produce_exp_quad
    (102) term -> . term MUL push_operator term
    (103) term -> . term DIV push_operator term
    (104) term -> . factor produce_term_quad
    (110) factor -> . identifier
    (111) factor -> . const_int
    (112) factor -> . const_float
    (113) factor -> . LPAREN push_cap expression RPAREN pop_cap
    (114) factor -> . array_access
    (115) factor -> . matrix_access
    (116) factor -> . function_call
    (117) identifier -> . ID
    (118) const_int -> . CONST_INT
    (119) const_float -> . CONST_FLOAT
    (122) array_access -> . identifier lsqbracket expression array_rsqbracket
    (123) matrix_access -> . identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2
    (82) function_call -> . ID function_call_check function_call_lparen call_params0 function_call_rparen

    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_FLOAT     shift and go to state 94

    identifier                     shift and go to state 85
    expression                     shift and go to state 185
    term                           shift and go to state 82
    factor                         shift and go to state 84
    const_int                      shift and go to state 86
    const_float                    shift and go to state 87
    array_access                   shift and go to state 89
    matrix_access                  shift and go to state 90
    function_call                  shift and go to state 91

state 159

    (127) matrix_lsqbracket_2 -> LSQBRACKET .

    LPAREN          reduce using rule 127 (matrix_lsqbracket_2 -> LSQBRACKET .)
    ID              reduce using rule 127 (matrix_lsqbracket_2 -> LSQBRACKET .)
    CONST_INT       reduce using rule 127 (matrix_lsqbracket_2 -> LSQBRACKET .)
    CONST_FLOAT     reduce using rule 127 (matrix_lsqbracket_2 -> LSQBRACKET .)


state 160

    (70) condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET . statements RBRACKET fill_pending_jump
    (71) condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET . statements RBRACKET else LBRACKET statements RBRACKET fill_pending_jump
    (47) statements -> . write SEMICOLON statements
    (48) statements -> . read SEMICOLON statements
    (49) statements -> . var_assignment SEMICOLON statements
    (50) statements -> . condition statements
    (51) statements -> . loop statements
    (52) statements -> . function_call SEMICOLON statements
    (53) statements -> . empty
    (54) write -> . WRITE write_params0
    (63) read -> . READ push_operator identifier
    (64) var_assignment -> . simple_assignment
    (65) var_assignment -> . array_assignment
    (66) var_assignment -> . matrix_assignment
    (70) condition -> . IF cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET fill_pending_jump
    (71) condition -> . IF cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET else LBRACKET statements RBRACKET fill_pending_jump
    (78) loop -> . repeat cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET fill_returning_jump
    (82) function_call -> . ID function_call_check function_call_lparen call_params0 function_call_rparen
    (131) empty -> .
    (67) simple_assignment -> . identifier ASSIGN push_operator expression
    (68) array_assignment -> . array_access ASSIGN push_operator expression
    (69) matrix_assignment -> . matrix_access ASSIGN push_operator expression
    (80) repeat -> . REPEAT
    (117) identifier -> . ID
    (122) array_access -> . identifier lsqbracket expression array_rsqbracket
    (123) matrix_access -> . identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2

    WRITE           shift and go to state 31
    READ            shift and go to state 32
    IF              shift and go to state 37
    ID              shift and go to state 39
    RBRACKET        reduce using rule 131 (empty -> .)
    REPEAT          shift and go to state 42

    statements                     shift and go to state 186
    write                          shift and go to state 24
    read                           shift and go to state 25
    var_assignment                 shift and go to state 26
    condition                      shift and go to state 27
    loop                           shift and go to state 28
    function_call                  shift and go to state 29
    empty                          shift and go to state 30
    identifier                     shift and go to state 33
    simple_assignment              shift and go to state 34
    array_assignment               shift and go to state 35
    matrix_assignment              shift and go to state 36
    repeat                         shift and go to state 38
    array_access                   shift and go to state 40
    matrix_access                  shift and go to state 41

state 161

    (91) hyper_expression -> hyper_expression AND push_operator . hyper_expression
    (91) hyper_expression -> . hyper_expression AND push_operator hyper_expression
    (92) hyper_expression -> . hyper_expression OR push_operator hyper_expression
    (93) hyper_expression -> . super_expression produce_hyperexp_quad
    (94) super_expression -> . super_expression LTHAN push_operator super_expression
    (95) super_expression -> . super_expression GTHAN push_operator super_expression
    (96) super_expression -> . super_expression EQUAL push_operator super_expression
    (97) super_expression -> . super_expression DIFFERENT push_operator super_expression
    (98) super_expression -> . expression produce_superexp_quad
    (99) expression -> . expression ADD push_operator expression
    (100) expression -> . expression SUB push_operator expression
    (101) expression -> . term produce_exp_quad
    (102) term -> . term MUL push_operator term
    (103) term -> . term DIV push_operator term
    (104) term -> . factor produce_term_quad
    (110) factor -> . identifier
    (111) factor -> . const_int
    (112) factor -> . const_float
    (113) factor -> . LPAREN push_cap expression RPAREN pop_cap
    (114) factor -> . array_access
    (115) factor -> . matrix_access
    (116) factor -> . function_call
    (117) identifier -> . ID
    (118) const_int -> . CONST_INT
    (119) const_float -> . CONST_FLOAT
    (122) array_access -> . identifier lsqbracket expression array_rsqbracket
    (123) matrix_access -> . identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2
    (82) function_call -> . ID function_call_check function_call_lparen call_params0 function_call_rparen

    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_FLOAT     shift and go to state 94

    hyper_expression               shift and go to state 187
    super_expression               shift and go to state 100
    expression                     shift and go to state 101
    term                           shift and go to state 82
    factor                         shift and go to state 84
    identifier                     shift and go to state 85
    const_int                      shift and go to state 86
    const_float                    shift and go to state 87
    array_access                   shift and go to state 89
    matrix_access                  shift and go to state 90
    function_call                  shift and go to state 91

state 162

    (92) hyper_expression -> hyper_expression OR push_operator . hyper_expression
    (91) hyper_expression -> . hyper_expression AND push_operator hyper_expression
    (92) hyper_expression -> . hyper_expression OR push_operator hyper_expression
    (93) hyper_expression -> . super_expression produce_hyperexp_quad
    (94) super_expression -> . super_expression LTHAN push_operator super_expression
    (95) super_expression -> . super_expression GTHAN push_operator super_expression
    (96) super_expression -> . super_expression EQUAL push_operator super_expression
    (97) super_expression -> . super_expression DIFFERENT push_operator super_expression
    (98) super_expression -> . expression produce_superexp_quad
    (99) expression -> . expression ADD push_operator expression
    (100) expression -> . expression SUB push_operator expression
    (101) expression -> . term produce_exp_quad
    (102) term -> . term MUL push_operator term
    (103) term -> . term DIV push_operator term
    (104) term -> . factor produce_term_quad
    (110) factor -> . identifier
    (111) factor -> . const_int
    (112) factor -> . const_float
    (113) factor -> . LPAREN push_cap expression RPAREN pop_cap
    (114) factor -> . array_access
    (115) factor -> . matrix_access
    (116) factor -> . function_call
    (117) identifier -> . ID
    (118) const_int -> . CONST_INT
    (119) const_float -> . CONST_FLOAT
    (122) array_access -> . identifier lsqbracket expression array_rsqbracket
    (123) matrix_access -> . identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2
    (82) function_call -> . ID function_call_check function_call_lparen call_params0 function_call_rparen

    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_FLOAT     shift and go to state 94

    hyper_expression               shift and go to state 188
    super_expression               shift and go to state 100
    expression                     shift and go to state 101
    term                           shift and go to state 82
    factor                         shift and go to state 84
    identifier                     shift and go to state 85
    const_int                      shift and go to state 86
    const_float                    shift and go to state 87
    array_access                   shift and go to state 89
    matrix_access                  shift and go to state 90
    function_call                  shift and go to state 91

state 163

    (94) super_expression -> super_expression LTHAN push_operator . super_expression
    (94) super_expression -> . super_expression LTHAN push_operator super_expression
    (95) super_expression -> . super_expression GTHAN push_operator super_expression
    (96) super_expression -> . super_expression EQUAL push_operator super_expression
    (97) super_expression -> . super_expression DIFFERENT push_operator super_expression
    (98) super_expression -> . expression produce_superexp_quad
    (99) expression -> . expression ADD push_operator expression
    (100) expression -> . expression SUB push_operator expression
    (101) expression -> . term produce_exp_quad
    (102) term -> . term MUL push_operator term
    (103) term -> . term DIV push_operator term
    (104) term -> . factor produce_term_quad
    (110) factor -> . identifier
    (111) factor -> . const_int
    (112) factor -> . const_float
    (113) factor -> . LPAREN push_cap expression RPAREN pop_cap
    (114) factor -> . array_access
    (115) factor -> . matrix_access
    (116) factor -> . function_call
    (117) identifier -> . ID
    (118) const_int -> . CONST_INT
    (119) const_float -> . CONST_FLOAT
    (122) array_access -> . identifier lsqbracket expression array_rsqbracket
    (123) matrix_access -> . identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2
    (82) function_call -> . ID function_call_check function_call_lparen call_params0 function_call_rparen

    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_FLOAT     shift and go to state 94

    super_expression               shift and go to state 189
    expression                     shift and go to state 101
    term                           shift and go to state 82
    factor                         shift and go to state 84
    identifier                     shift and go to state 85
    const_int                      shift and go to state 86
    const_float                    shift and go to state 87
    array_access                   shift and go to state 89
    matrix_access                  shift and go to state 90
    function_call                  shift and go to state 91

state 164

    (95) super_expression -> super_expression GTHAN push_operator . super_expression
    (94) super_expression -> . super_expression LTHAN push_operator super_expression
    (95) super_expression -> . super_expression GTHAN push_operator super_expression
    (96) super_expression -> . super_expression EQUAL push_operator super_expression
    (97) super_expression -> . super_expression DIFFERENT push_operator super_expression
    (98) super_expression -> . expression produce_superexp_quad
    (99) expression -> . expression ADD push_operator expression
    (100) expression -> . expression SUB push_operator expression
    (101) expression -> . term produce_exp_quad
    (102) term -> . term MUL push_operator term
    (103) term -> . term DIV push_operator term
    (104) term -> . factor produce_term_quad
    (110) factor -> . identifier
    (111) factor -> . const_int
    (112) factor -> . const_float
    (113) factor -> . LPAREN push_cap expression RPAREN pop_cap
    (114) factor -> . array_access
    (115) factor -> . matrix_access
    (116) factor -> . function_call
    (117) identifier -> . ID
    (118) const_int -> . CONST_INT
    (119) const_float -> . CONST_FLOAT
    (122) array_access -> . identifier lsqbracket expression array_rsqbracket
    (123) matrix_access -> . identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2
    (82) function_call -> . ID function_call_check function_call_lparen call_params0 function_call_rparen

    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_FLOAT     shift and go to state 94

    super_expression               shift and go to state 190
    expression                     shift and go to state 101
    term                           shift and go to state 82
    factor                         shift and go to state 84
    identifier                     shift and go to state 85
    const_int                      shift and go to state 86
    const_float                    shift and go to state 87
    array_access                   shift and go to state 89
    matrix_access                  shift and go to state 90
    function_call                  shift and go to state 91

state 165

    (96) super_expression -> super_expression EQUAL push_operator . super_expression
    (94) super_expression -> . super_expression LTHAN push_operator super_expression
    (95) super_expression -> . super_expression GTHAN push_operator super_expression
    (96) super_expression -> . super_expression EQUAL push_operator super_expression
    (97) super_expression -> . super_expression DIFFERENT push_operator super_expression
    (98) super_expression -> . expression produce_superexp_quad
    (99) expression -> . expression ADD push_operator expression
    (100) expression -> . expression SUB push_operator expression
    (101) expression -> . term produce_exp_quad
    (102) term -> . term MUL push_operator term
    (103) term -> . term DIV push_operator term
    (104) term -> . factor produce_term_quad
    (110) factor -> . identifier
    (111) factor -> . const_int
    (112) factor -> . const_float
    (113) factor -> . LPAREN push_cap expression RPAREN pop_cap
    (114) factor -> . array_access
    (115) factor -> . matrix_access
    (116) factor -> . function_call
    (117) identifier -> . ID
    (118) const_int -> . CONST_INT
    (119) const_float -> . CONST_FLOAT
    (122) array_access -> . identifier lsqbracket expression array_rsqbracket
    (123) matrix_access -> . identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2
    (82) function_call -> . ID function_call_check function_call_lparen call_params0 function_call_rparen

    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_FLOAT     shift and go to state 94

    super_expression               shift and go to state 191
    expression                     shift and go to state 101
    term                           shift and go to state 82
    factor                         shift and go to state 84
    identifier                     shift and go to state 85
    const_int                      shift and go to state 86
    const_float                    shift and go to state 87
    array_access                   shift and go to state 89
    matrix_access                  shift and go to state 90
    function_call                  shift and go to state 91

state 166

    (97) super_expression -> super_expression DIFFERENT push_operator . super_expression
    (94) super_expression -> . super_expression LTHAN push_operator super_expression
    (95) super_expression -> . super_expression GTHAN push_operator super_expression
    (96) super_expression -> . super_expression EQUAL push_operator super_expression
    (97) super_expression -> . super_expression DIFFERENT push_operator super_expression
    (98) super_expression -> . expression produce_superexp_quad
    (99) expression -> . expression ADD push_operator expression
    (100) expression -> . expression SUB push_operator expression
    (101) expression -> . term produce_exp_quad
    (102) term -> . term MUL push_operator term
    (103) term -> . term DIV push_operator term
    (104) term -> . factor produce_term_quad
    (110) factor -> . identifier
    (111) factor -> . const_int
    (112) factor -> . const_float
    (113) factor -> . LPAREN push_cap expression RPAREN pop_cap
    (114) factor -> . array_access
    (115) factor -> . matrix_access
    (116) factor -> . function_call
    (117) identifier -> . ID
    (118) const_int -> . CONST_INT
    (119) const_float -> . CONST_FLOAT
    (122) array_access -> . identifier lsqbracket expression array_rsqbracket
    (123) matrix_access -> . identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2
    (82) function_call -> . ID function_call_check function_call_lparen call_params0 function_call_rparen

    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_FLOAT     shift and go to state 94

    super_expression               shift and go to state 192
    expression                     shift and go to state 101
    term                           shift and go to state 82
    factor                         shift and go to state 84
    identifier                     shift and go to state 85
    const_int                      shift and go to state 86
    const_float                    shift and go to state 87
    array_access                   shift and go to state 89
    matrix_access                  shift and go to state 90
    function_call                  shift and go to state 91

state 167

    (78) loop -> repeat cond_lparen hyper_expression cond_rparen LBRACKET . statements RBRACKET fill_returning_jump
    (47) statements -> . write SEMICOLON statements
    (48) statements -> . read SEMICOLON statements
    (49) statements -> . var_assignment SEMICOLON statements
    (50) statements -> . condition statements
    (51) statements -> . loop statements
    (52) statements -> . function_call SEMICOLON statements
    (53) statements -> . empty
    (54) write -> . WRITE write_params0
    (63) read -> . READ push_operator identifier
    (64) var_assignment -> . simple_assignment
    (65) var_assignment -> . array_assignment
    (66) var_assignment -> . matrix_assignment
    (70) condition -> . IF cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET fill_pending_jump
    (71) condition -> . IF cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET else LBRACKET statements RBRACKET fill_pending_jump
    (78) loop -> . repeat cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET fill_returning_jump
    (82) function_call -> . ID function_call_check function_call_lparen call_params0 function_call_rparen
    (131) empty -> .
    (67) simple_assignment -> . identifier ASSIGN push_operator expression
    (68) array_assignment -> . array_access ASSIGN push_operator expression
    (69) matrix_assignment -> . matrix_access ASSIGN push_operator expression
    (80) repeat -> . REPEAT
    (117) identifier -> . ID
    (122) array_access -> . identifier lsqbracket expression array_rsqbracket
    (123) matrix_access -> . identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2

    WRITE           shift and go to state 31
    READ            shift and go to state 32
    IF              shift and go to state 37
    ID              shift and go to state 39
    RBRACKET        reduce using rule 131 (empty -> .)
    REPEAT          shift and go to state 42

    repeat                         shift and go to state 38
    statements                     shift and go to state 193
    write                          shift and go to state 24
    read                           shift and go to state 25
    var_assignment                 shift and go to state 26
    condition                      shift and go to state 27
    loop                           shift and go to state 28
    function_call                  shift and go to state 29
    empty                          shift and go to state 30
    identifier                     shift and go to state 33
    simple_assignment              shift and go to state 34
    array_assignment               shift and go to state 35
    matrix_assignment              shift and go to state 36
    array_access                   shift and go to state 40
    matrix_access                  shift and go to state 41

state 168

    (82) function_call -> ID function_call_check function_call_lparen call_params0 function_call_rparen .

    SEMICOLON       reduce using rule 82 (function_call -> ID function_call_check function_call_lparen call_params0 function_call_rparen .)
    MUL             reduce using rule 82 (function_call -> ID function_call_check function_call_lparen call_params0 function_call_rparen .)
    DIV             reduce using rule 82 (function_call -> ID function_call_check function_call_lparen call_params0 function_call_rparen .)
    ADD             reduce using rule 82 (function_call -> ID function_call_check function_call_lparen call_params0 function_call_rparen .)
    SUB             reduce using rule 82 (function_call -> ID function_call_check function_call_lparen call_params0 function_call_rparen .)
    COMMA           reduce using rule 82 (function_call -> ID function_call_check function_call_lparen call_params0 function_call_rparen .)
    RSQBRACKET      reduce using rule 82 (function_call -> ID function_call_check function_call_lparen call_params0 function_call_rparen .)
    LTHAN           reduce using rule 82 (function_call -> ID function_call_check function_call_lparen call_params0 function_call_rparen .)
    GTHAN           reduce using rule 82 (function_call -> ID function_call_check function_call_lparen call_params0 function_call_rparen .)
    EQUAL           reduce using rule 82 (function_call -> ID function_call_check function_call_lparen call_params0 function_call_rparen .)
    DIFFERENT       reduce using rule 82 (function_call -> ID function_call_check function_call_lparen call_params0 function_call_rparen .)
    AND             reduce using rule 82 (function_call -> ID function_call_check function_call_lparen call_params0 function_call_rparen .)
    OR              reduce using rule 82 (function_call -> ID function_call_check function_call_lparen call_params0 function_call_rparen .)
    RPAREN          reduce using rule 82 (function_call -> ID function_call_check function_call_lparen call_params0 function_call_rparen .)


state 169

    (85) function_call_rparen -> RPAREN .

    SEMICOLON       reduce using rule 85 (function_call_rparen -> RPAREN .)
    MUL             reduce using rule 85 (function_call_rparen -> RPAREN .)
    DIV             reduce using rule 85 (function_call_rparen -> RPAREN .)
    ADD             reduce using rule 85 (function_call_rparen -> RPAREN .)
    SUB             reduce using rule 85 (function_call_rparen -> RPAREN .)
    COMMA           reduce using rule 85 (function_call_rparen -> RPAREN .)
    RSQBRACKET      reduce using rule 85 (function_call_rparen -> RPAREN .)
    LTHAN           reduce using rule 85 (function_call_rparen -> RPAREN .)
    GTHAN           reduce using rule 85 (function_call_rparen -> RPAREN .)
    EQUAL           reduce using rule 85 (function_call_rparen -> RPAREN .)
    DIFFERENT       reduce using rule 85 (function_call_rparen -> RPAREN .)
    AND             reduce using rule 85 (function_call_rparen -> RPAREN .)
    OR              reduce using rule 85 (function_call_rparen -> RPAREN .)
    RPAREN          reduce using rule 85 (function_call_rparen -> RPAREN .)


state 170

    (86) call_params0 -> hyper_expression handle_call_param . call_params1
    (88) call_params1 -> . COMMA hyper_expression handle_call_param call_params1
    (89) call_params1 -> . empty
    (131) empty -> .

    COMMA           shift and go to state 195
    RPAREN          reduce using rule 131 (empty -> .)

    call_params1                   shift and go to state 194
    empty                          shift and go to state 196

state 171

    (28) matrix_declaration -> ID LSQBRACKET CONST_INT RSQBRACKET LSQBRACKET . CONST_INT RSQBRACKET COLON type SEMICOLON

    CONST_INT       shift and go to state 197


state 172

    (27) array_declaration -> ID LSQBRACKET CONST_INT RSQBRACKET COLON . type SEMICOLON
    (129) type -> . INT
    (130) type -> . FLOAT

    INT             shift and go to state 109
    FLOAT           shift and go to state 110

    type                           shift and go to state 198

state 173

    (1) routine -> routine_init ID SEMICOLON global_scope_init global_vars_block instructions_block function_block BEGIN COLON LSQBRACKET local_scope_init local_vars_block fill_main_jump . instructions_block RSQBRACKET
    (8) instructions_block -> . INSTRUCTIONS COLON statements
    (9) instructions_block -> . empty
    (131) empty -> .

    INSTRUCTIONS    shift and go to state 11
    RSQBRACKET      reduce using rule 131 (empty -> .)

    instructions_block             shift and go to state 199
    empty                          shift and go to state 12

state 174

    (6) local_vars_block -> LOCALS COLON . var_declarations
    (22) var_declarations -> . VAR simple_declaration var_declarations
    (23) var_declarations -> . VAR array_declaration var_declarations
    (24) var_declarations -> . VAR matrix_declaration var_declarations
    (25) var_declarations -> . empty
    (131) empty -> .

    VAR             shift and go to state 19
    INSTRUCTIONS    reduce using rule 131 (empty -> .)
    RSQBRACKET      reduce using rule 131 (empty -> .)
    RBRACKET        reduce using rule 131 (empty -> .)

    var_declarations               shift and go to state 200
    empty                          shift and go to state 20

state 175

    (46) param -> ID . COLON type

    COLON           shift and go to state 201


state 176

    (32) function_declarations -> PROC ID proc_scope_init LPAREN params0 . RPAREN COLON VOID set_return_type LBRACKET local_vars_block store_curr_ip instructions_block function_rbracket function_declarations
    (33) function_declarations -> PROC ID proc_scope_init LPAREN params0 . RPAREN COLON func_type set_return_type LBRACKET local_vars_block store_curr_ip proc_instructions_block RBRACKET function_declarations

    RPAREN          shift and go to state 202


state 177

    (42) params0 -> param . params1
    (44) params1 -> . COMMA param params1
    (45) params1 -> . empty
    (131) empty -> .

    COMMA           shift and go to state 204
    RPAREN          reduce using rule 131 (empty -> .)

    params1                        shift and go to state 203
    empty                          shift and go to state 205

state 178

    (43) params0 -> empty .

    RPAREN          reduce using rule 43 (params0 -> empty .)


state 179

    (57) write_params1 -> COMMA write_operator . expression produce_write_quad write_params1
    (58) write_params1 -> COMMA write_operator . const_text produce_write_quad write_params1
    (99) expression -> . expression ADD push_operator expression
    (100) expression -> . expression SUB push_operator expression
    (101) expression -> . term produce_exp_quad
    (60) const_text -> . CONST_TEXT
    (102) term -> . term MUL push_operator term
    (103) term -> . term DIV push_operator term
    (104) term -> . factor produce_term_quad
    (110) factor -> . identifier
    (111) factor -> . const_int
    (112) factor -> . const_float
    (113) factor -> . LPAREN push_cap expression RPAREN pop_cap
    (114) factor -> . array_access
    (115) factor -> . matrix_access
    (116) factor -> . function_call
    (117) identifier -> . ID
    (118) const_int -> . CONST_INT
    (119) const_float -> . CONST_FLOAT
    (122) array_access -> . identifier lsqbracket expression array_rsqbracket
    (123) matrix_access -> . identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2
    (82) function_call -> . ID function_call_check function_call_lparen call_params0 function_call_rparen

    CONST_TEXT      shift and go to state 83
    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_FLOAT     shift and go to state 94

    expression                     shift and go to state 206
    const_text                     shift and go to state 207
    term                           shift and go to state 82
    factor                         shift and go to state 84
    identifier                     shift and go to state 85
    const_int                      shift and go to state 86
    const_float                    shift and go to state 87
    array_access                   shift and go to state 89
    matrix_access                  shift and go to state 90
    function_call                  shift and go to state 91

state 180

    (99) expression -> expression ADD push_operator expression .
    (99) expression -> expression . ADD push_operator expression
    (100) expression -> expression . SUB push_operator expression

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
    COMMA           reduce using rule 99 (expression -> expression ADD push_operator expression .)
    SEMICOLON       reduce using rule 99 (expression -> expression ADD push_operator expression .)
    RSQBRACKET      reduce using rule 99 (expression -> expression ADD push_operator expression .)
    LTHAN           reduce using rule 99 (expression -> expression ADD push_operator expression .)
    GTHAN           reduce using rule 99 (expression -> expression ADD push_operator expression .)
    EQUAL           reduce using rule 99 (expression -> expression ADD push_operator expression .)
    DIFFERENT       reduce using rule 99 (expression -> expression ADD push_operator expression .)
    AND             reduce using rule 99 (expression -> expression ADD push_operator expression .)
    OR              reduce using rule 99 (expression -> expression ADD push_operator expression .)
    RPAREN          reduce using rule 99 (expression -> expression ADD push_operator expression .)
    ADD             shift and go to state 115
    SUB             shift and go to state 116

  ! ADD             [ reduce using rule 99 (expression -> expression ADD push_operator expression .) ]
  ! SUB             [ reduce using rule 99 (expression -> expression ADD push_operator expression .) ]


state 181

    (100) expression -> expression SUB push_operator expression .
    (99) expression -> expression . ADD push_operator expression
    (100) expression -> expression . SUB push_operator expression

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
    COMMA           reduce using rule 100 (expression -> expression SUB push_operator expression .)
    SEMICOLON       reduce using rule 100 (expression -> expression SUB push_operator expression .)
    RSQBRACKET      reduce using rule 100 (expression -> expression SUB push_operator expression .)
    LTHAN           reduce using rule 100 (expression -> expression SUB push_operator expression .)
    GTHAN           reduce using rule 100 (expression -> expression SUB push_operator expression .)
    EQUAL           reduce using rule 100 (expression -> expression SUB push_operator expression .)
    DIFFERENT       reduce using rule 100 (expression -> expression SUB push_operator expression .)
    AND             reduce using rule 100 (expression -> expression SUB push_operator expression .)
    OR              reduce using rule 100 (expression -> expression SUB push_operator expression .)
    RPAREN          reduce using rule 100 (expression -> expression SUB push_operator expression .)
    ADD             shift and go to state 115
    SUB             shift and go to state 116

  ! ADD             [ reduce using rule 100 (expression -> expression SUB push_operator expression .) ]
  ! SUB             [ reduce using rule 100 (expression -> expression SUB push_operator expression .) ]


state 182

    (102) term -> term MUL push_operator term .
    (102) term -> term . MUL push_operator term
    (103) term -> term . DIV push_operator term

  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
    ADD             reduce using rule 102 (term -> term MUL push_operator term .)
    SUB             reduce using rule 102 (term -> term MUL push_operator term .)
    COMMA           reduce using rule 102 (term -> term MUL push_operator term .)
    SEMICOLON       reduce using rule 102 (term -> term MUL push_operator term .)
    RSQBRACKET      reduce using rule 102 (term -> term MUL push_operator term .)
    LTHAN           reduce using rule 102 (term -> term MUL push_operator term .)
    GTHAN           reduce using rule 102 (term -> term MUL push_operator term .)
    EQUAL           reduce using rule 102 (term -> term MUL push_operator term .)
    DIFFERENT       reduce using rule 102 (term -> term MUL push_operator term .)
    AND             reduce using rule 102 (term -> term MUL push_operator term .)
    OR              reduce using rule 102 (term -> term MUL push_operator term .)
    RPAREN          reduce using rule 102 (term -> term MUL push_operator term .)
    MUL             shift and go to state 119
    DIV             shift and go to state 120

  ! MUL             [ reduce using rule 102 (term -> term MUL push_operator term .) ]
  ! DIV             [ reduce using rule 102 (term -> term MUL push_operator term .) ]


state 183

    (103) term -> term DIV push_operator term .
    (102) term -> term . MUL push_operator term
    (103) term -> term . DIV push_operator term

  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
    ADD             reduce using rule 103 (term -> term DIV push_operator term .)
    SUB             reduce using rule 103 (term -> term DIV push_operator term .)
    COMMA           reduce using rule 103 (term -> term DIV push_operator term .)
    SEMICOLON       reduce using rule 103 (term -> term DIV push_operator term .)
    RSQBRACKET      reduce using rule 103 (term -> term DIV push_operator term .)
    LTHAN           reduce using rule 103 (term -> term DIV push_operator term .)
    GTHAN           reduce using rule 103 (term -> term DIV push_operator term .)
    EQUAL           reduce using rule 103 (term -> term DIV push_operator term .)
    DIFFERENT       reduce using rule 103 (term -> term DIV push_operator term .)
    AND             reduce using rule 103 (term -> term DIV push_operator term .)
    OR              reduce using rule 103 (term -> term DIV push_operator term .)
    RPAREN          reduce using rule 103 (term -> term DIV push_operator term .)
    MUL             shift and go to state 119
    DIV             shift and go to state 120

  ! MUL             [ reduce using rule 103 (term -> term DIV push_operator term .) ]
  ! DIV             [ reduce using rule 103 (term -> term DIV push_operator term .) ]


state 184

    (113) factor -> LPAREN push_cap expression RPAREN . pop_cap
    (121) pop_cap -> .

    MUL             reduce using rule 121 (pop_cap -> .)
    DIV             reduce using rule 121 (pop_cap -> .)
    ADD             reduce using rule 121 (pop_cap -> .)
    SUB             reduce using rule 121 (pop_cap -> .)
    COMMA           reduce using rule 121 (pop_cap -> .)
    SEMICOLON       reduce using rule 121 (pop_cap -> .)
    RSQBRACKET      reduce using rule 121 (pop_cap -> .)
    LTHAN           reduce using rule 121 (pop_cap -> .)
    GTHAN           reduce using rule 121 (pop_cap -> .)
    EQUAL           reduce using rule 121 (pop_cap -> .)
    DIFFERENT       reduce using rule 121 (pop_cap -> .)
    AND             reduce using rule 121 (pop_cap -> .)
    OR              reduce using rule 121 (pop_cap -> .)
    RPAREN          reduce using rule 121 (pop_cap -> .)

    pop_cap                        shift and go to state 208

state 185

    (123) matrix_access -> identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression . matrix_rsqbracket_2
    (99) expression -> expression . ADD push_operator expression
    (100) expression -> expression . SUB push_operator expression
    (128) matrix_rsqbracket_2 -> . RSQBRACKET

    ADD             shift and go to state 115
    SUB             shift and go to state 116
    RSQBRACKET      shift and go to state 210

    matrix_rsqbracket_2            shift and go to state 209

state 186

    (70) condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET statements . RBRACKET fill_pending_jump
    (71) condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET statements . RBRACKET else LBRACKET statements RBRACKET fill_pending_jump

    RBRACKET        shift and go to state 211


state 187

    (91) hyper_expression -> hyper_expression AND push_operator hyper_expression .
    (91) hyper_expression -> hyper_expression . AND push_operator hyper_expression
    (92) hyper_expression -> hyper_expression . OR push_operator hyper_expression

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    RPAREN          reduce using rule 91 (hyper_expression -> hyper_expression AND push_operator hyper_expression .)
    COMMA           reduce using rule 91 (hyper_expression -> hyper_expression AND push_operator hyper_expression .)
    AND             shift and go to state 128
    OR              shift and go to state 129

  ! AND             [ reduce using rule 91 (hyper_expression -> hyper_expression AND push_operator hyper_expression .) ]
  ! OR              [ reduce using rule 91 (hyper_expression -> hyper_expression AND push_operator hyper_expression .) ]


state 188

    (92) hyper_expression -> hyper_expression OR push_operator hyper_expression .
    (91) hyper_expression -> hyper_expression . AND push_operator hyper_expression
    (92) hyper_expression -> hyper_expression . OR push_operator hyper_expression

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    RPAREN          reduce using rule 92 (hyper_expression -> hyper_expression OR push_operator hyper_expression .)
    COMMA           reduce using rule 92 (hyper_expression -> hyper_expression OR push_operator hyper_expression .)
    AND             shift and go to state 128
    OR              shift and go to state 129

  ! AND             [ reduce using rule 92 (hyper_expression -> hyper_expression OR push_operator hyper_expression .) ]
  ! OR              [ reduce using rule 92 (hyper_expression -> hyper_expression OR push_operator hyper_expression .) ]


state 189

    (94) super_expression -> super_expression LTHAN push_operator super_expression .
    (94) super_expression -> super_expression . LTHAN push_operator super_expression
    (95) super_expression -> super_expression . GTHAN push_operator super_expression
    (96) super_expression -> super_expression . EQUAL push_operator super_expression
    (97) super_expression -> super_expression . DIFFERENT push_operator super_expression

  ! shift/reduce conflict for LTHAN resolved as shift
  ! shift/reduce conflict for GTHAN resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
    AND             reduce using rule 94 (super_expression -> super_expression LTHAN push_operator super_expression .)
    OR              reduce using rule 94 (super_expression -> super_expression LTHAN push_operator super_expression .)
    RPAREN          reduce using rule 94 (super_expression -> super_expression LTHAN push_operator super_expression .)
    COMMA           reduce using rule 94 (super_expression -> super_expression LTHAN push_operator super_expression .)
    LTHAN           shift and go to state 132
    GTHAN           shift and go to state 133
    EQUAL           shift and go to state 134
    DIFFERENT       shift and go to state 135

  ! LTHAN           [ reduce using rule 94 (super_expression -> super_expression LTHAN push_operator super_expression .) ]
  ! GTHAN           [ reduce using rule 94 (super_expression -> super_expression LTHAN push_operator super_expression .) ]
  ! EQUAL           [ reduce using rule 94 (super_expression -> super_expression LTHAN push_operator super_expression .) ]
  ! DIFFERENT       [ reduce using rule 94 (super_expression -> super_expression LTHAN push_operator super_expression .) ]


state 190

    (95) super_expression -> super_expression GTHAN push_operator super_expression .
    (94) super_expression -> super_expression . LTHAN push_operator super_expression
    (95) super_expression -> super_expression . GTHAN push_operator super_expression
    (96) super_expression -> super_expression . EQUAL push_operator super_expression
    (97) super_expression -> super_expression . DIFFERENT push_operator super_expression

  ! shift/reduce conflict for LTHAN resolved as shift
  ! shift/reduce conflict for GTHAN resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
    AND             reduce using rule 95 (super_expression -> super_expression GTHAN push_operator super_expression .)
    OR              reduce using rule 95 (super_expression -> super_expression GTHAN push_operator super_expression .)
    RPAREN          reduce using rule 95 (super_expression -> super_expression GTHAN push_operator super_expression .)
    COMMA           reduce using rule 95 (super_expression -> super_expression GTHAN push_operator super_expression .)
    LTHAN           shift and go to state 132
    GTHAN           shift and go to state 133
    EQUAL           shift and go to state 134
    DIFFERENT       shift and go to state 135

  ! LTHAN           [ reduce using rule 95 (super_expression -> super_expression GTHAN push_operator super_expression .) ]
  ! GTHAN           [ reduce using rule 95 (super_expression -> super_expression GTHAN push_operator super_expression .) ]
  ! EQUAL           [ reduce using rule 95 (super_expression -> super_expression GTHAN push_operator super_expression .) ]
  ! DIFFERENT       [ reduce using rule 95 (super_expression -> super_expression GTHAN push_operator super_expression .) ]


state 191

    (96) super_expression -> super_expression EQUAL push_operator super_expression .
    (94) super_expression -> super_expression . LTHAN push_operator super_expression
    (95) super_expression -> super_expression . GTHAN push_operator super_expression
    (96) super_expression -> super_expression . EQUAL push_operator super_expression
    (97) super_expression -> super_expression . DIFFERENT push_operator super_expression

  ! shift/reduce conflict for LTHAN resolved as shift
  ! shift/reduce conflict for GTHAN resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
    AND             reduce using rule 96 (super_expression -> super_expression EQUAL push_operator super_expression .)
    OR              reduce using rule 96 (super_expression -> super_expression EQUAL push_operator super_expression .)
    RPAREN          reduce using rule 96 (super_expression -> super_expression EQUAL push_operator super_expression .)
    COMMA           reduce using rule 96 (super_expression -> super_expression EQUAL push_operator super_expression .)
    LTHAN           shift and go to state 132
    GTHAN           shift and go to state 133
    EQUAL           shift and go to state 134
    DIFFERENT       shift and go to state 135

  ! LTHAN           [ reduce using rule 96 (super_expression -> super_expression EQUAL push_operator super_expression .) ]
  ! GTHAN           [ reduce using rule 96 (super_expression -> super_expression EQUAL push_operator super_expression .) ]
  ! EQUAL           [ reduce using rule 96 (super_expression -> super_expression EQUAL push_operator super_expression .) ]
  ! DIFFERENT       [ reduce using rule 96 (super_expression -> super_expression EQUAL push_operator super_expression .) ]


state 192

    (97) super_expression -> super_expression DIFFERENT push_operator super_expression .
    (94) super_expression -> super_expression . LTHAN push_operator super_expression
    (95) super_expression -> super_expression . GTHAN push_operator super_expression
    (96) super_expression -> super_expression . EQUAL push_operator super_expression
    (97) super_expression -> super_expression . DIFFERENT push_operator super_expression

  ! shift/reduce conflict for LTHAN resolved as shift
  ! shift/reduce conflict for GTHAN resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
    AND             reduce using rule 97 (super_expression -> super_expression DIFFERENT push_operator super_expression .)
    OR              reduce using rule 97 (super_expression -> super_expression DIFFERENT push_operator super_expression .)
    RPAREN          reduce using rule 97 (super_expression -> super_expression DIFFERENT push_operator super_expression .)
    COMMA           reduce using rule 97 (super_expression -> super_expression DIFFERENT push_operator super_expression .)
    LTHAN           shift and go to state 132
    GTHAN           shift and go to state 133
    EQUAL           shift and go to state 134
    DIFFERENT       shift and go to state 135

  ! LTHAN           [ reduce using rule 97 (super_expression -> super_expression DIFFERENT push_operator super_expression .) ]
  ! GTHAN           [ reduce using rule 97 (super_expression -> super_expression DIFFERENT push_operator super_expression .) ]
  ! EQUAL           [ reduce using rule 97 (super_expression -> super_expression DIFFERENT push_operator super_expression .) ]
  ! DIFFERENT       [ reduce using rule 97 (super_expression -> super_expression DIFFERENT push_operator super_expression .) ]


state 193

    (78) loop -> repeat cond_lparen hyper_expression cond_rparen LBRACKET statements . RBRACKET fill_returning_jump

    RBRACKET        shift and go to state 212


state 194

    (86) call_params0 -> hyper_expression handle_call_param call_params1 .

    RPAREN          reduce using rule 86 (call_params0 -> hyper_expression handle_call_param call_params1 .)


state 195

    (88) call_params1 -> COMMA . hyper_expression handle_call_param call_params1
    (91) hyper_expression -> . hyper_expression AND push_operator hyper_expression
    (92) hyper_expression -> . hyper_expression OR push_operator hyper_expression
    (93) hyper_expression -> . super_expression produce_hyperexp_quad
    (94) super_expression -> . super_expression LTHAN push_operator super_expression
    (95) super_expression -> . super_expression GTHAN push_operator super_expression
    (96) super_expression -> . super_expression EQUAL push_operator super_expression
    (97) super_expression -> . super_expression DIFFERENT push_operator super_expression
    (98) super_expression -> . expression produce_superexp_quad
    (99) expression -> . expression ADD push_operator expression
    (100) expression -> . expression SUB push_operator expression
    (101) expression -> . term produce_exp_quad
    (102) term -> . term MUL push_operator term
    (103) term -> . term DIV push_operator term
    (104) term -> . factor produce_term_quad
    (110) factor -> . identifier
    (111) factor -> . const_int
    (112) factor -> . const_float
    (113) factor -> . LPAREN push_cap expression RPAREN pop_cap
    (114) factor -> . array_access
    (115) factor -> . matrix_access
    (116) factor -> . function_call
    (117) identifier -> . ID
    (118) const_int -> . CONST_INT
    (119) const_float -> . CONST_FLOAT
    (122) array_access -> . identifier lsqbracket expression array_rsqbracket
    (123) matrix_access -> . identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2
    (82) function_call -> . ID function_call_check function_call_lparen call_params0 function_call_rparen

    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_FLOAT     shift and go to state 94

    hyper_expression               shift and go to state 213
    super_expression               shift and go to state 100
    expression                     shift and go to state 101
    term                           shift and go to state 82
    factor                         shift and go to state 84
    identifier                     shift and go to state 85
    const_int                      shift and go to state 86
    const_float                    shift and go to state 87
    array_access                   shift and go to state 89
    matrix_access                  shift and go to state 90
    function_call                  shift and go to state 91

state 196

    (89) call_params1 -> empty .

    RPAREN          reduce using rule 89 (call_params1 -> empty .)


state 197

    (28) matrix_declaration -> ID LSQBRACKET CONST_INT RSQBRACKET LSQBRACKET CONST_INT . RSQBRACKET COLON type SEMICOLON

    RSQBRACKET      shift and go to state 214


state 198

    (27) array_declaration -> ID LSQBRACKET CONST_INT RSQBRACKET COLON type . SEMICOLON

    SEMICOLON       shift and go to state 215


state 199

    (1) routine -> routine_init ID SEMICOLON global_scope_init global_vars_block instructions_block function_block BEGIN COLON LSQBRACKET local_scope_init local_vars_block fill_main_jump instructions_block . RSQBRACKET

    RSQBRACKET      shift and go to state 216


state 200

    (6) local_vars_block -> LOCALS COLON var_declarations .

    INSTRUCTIONS    reduce using rule 6 (local_vars_block -> LOCALS COLON var_declarations .)
    RSQBRACKET      reduce using rule 6 (local_vars_block -> LOCALS COLON var_declarations .)
    RBRACKET        reduce using rule 6 (local_vars_block -> LOCALS COLON var_declarations .)


state 201

    (46) param -> ID COLON . type
    (129) type -> . INT
    (130) type -> . FLOAT

    INT             shift and go to state 109
    FLOAT           shift and go to state 110

    type                           shift and go to state 217

state 202

    (32) function_declarations -> PROC ID proc_scope_init LPAREN params0 RPAREN . COLON VOID set_return_type LBRACKET local_vars_block store_curr_ip instructions_block function_rbracket function_declarations
    (33) function_declarations -> PROC ID proc_scope_init LPAREN params0 RPAREN . COLON func_type set_return_type LBRACKET local_vars_block store_curr_ip proc_instructions_block RBRACKET function_declarations

    COLON           shift and go to state 218


state 203

    (42) params0 -> param params1 .

    RPAREN          reduce using rule 42 (params0 -> param params1 .)


state 204

    (44) params1 -> COMMA . param params1
    (46) param -> . ID COLON type

    ID              shift and go to state 175

    param                          shift and go to state 219

state 205

    (45) params1 -> empty .

    RPAREN          reduce using rule 45 (params1 -> empty .)


state 206

    (57) write_params1 -> COMMA write_operator expression . produce_write_quad write_params1
    (99) expression -> expression . ADD push_operator expression
    (100) expression -> expression . SUB push_operator expression
    (62) produce_write_quad -> .

    ADD             shift and go to state 115
    SUB             shift and go to state 116
    COMMA           reduce using rule 62 (produce_write_quad -> .)
    SEMICOLON       reduce using rule 62 (produce_write_quad -> .)

    produce_write_quad             shift and go to state 220

state 207

    (58) write_params1 -> COMMA write_operator const_text . produce_write_quad write_params1
    (62) produce_write_quad -> .

    COMMA           reduce using rule 62 (produce_write_quad -> .)
    SEMICOLON       reduce using rule 62 (produce_write_quad -> .)

    produce_write_quad             shift and go to state 221

state 208

    (113) factor -> LPAREN push_cap expression RPAREN pop_cap .

    MUL             reduce using rule 113 (factor -> LPAREN push_cap expression RPAREN pop_cap .)
    DIV             reduce using rule 113 (factor -> LPAREN push_cap expression RPAREN pop_cap .)
    ADD             reduce using rule 113 (factor -> LPAREN push_cap expression RPAREN pop_cap .)
    SUB             reduce using rule 113 (factor -> LPAREN push_cap expression RPAREN pop_cap .)
    COMMA           reduce using rule 113 (factor -> LPAREN push_cap expression RPAREN pop_cap .)
    SEMICOLON       reduce using rule 113 (factor -> LPAREN push_cap expression RPAREN pop_cap .)
    RSQBRACKET      reduce using rule 113 (factor -> LPAREN push_cap expression RPAREN pop_cap .)
    LTHAN           reduce using rule 113 (factor -> LPAREN push_cap expression RPAREN pop_cap .)
    GTHAN           reduce using rule 113 (factor -> LPAREN push_cap expression RPAREN pop_cap .)
    EQUAL           reduce using rule 113 (factor -> LPAREN push_cap expression RPAREN pop_cap .)
    DIFFERENT       reduce using rule 113 (factor -> LPAREN push_cap expression RPAREN pop_cap .)
    AND             reduce using rule 113 (factor -> LPAREN push_cap expression RPAREN pop_cap .)
    OR              reduce using rule 113 (factor -> LPAREN push_cap expression RPAREN pop_cap .)
    RPAREN          reduce using rule 113 (factor -> LPAREN push_cap expression RPAREN pop_cap .)


state 209

    (123) matrix_access -> identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2 .

    ASSIGN          reduce using rule 123 (matrix_access -> identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2 .)
    MUL             reduce using rule 123 (matrix_access -> identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2 .)
    DIV             reduce using rule 123 (matrix_access -> identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2 .)
    ADD             reduce using rule 123 (matrix_access -> identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2 .)
    SUB             reduce using rule 123 (matrix_access -> identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2 .)
    COMMA           reduce using rule 123 (matrix_access -> identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2 .)
    SEMICOLON       reduce using rule 123 (matrix_access -> identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2 .)
    RSQBRACKET      reduce using rule 123 (matrix_access -> identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2 .)
    LTHAN           reduce using rule 123 (matrix_access -> identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2 .)
    GTHAN           reduce using rule 123 (matrix_access -> identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2 .)
    EQUAL           reduce using rule 123 (matrix_access -> identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2 .)
    DIFFERENT       reduce using rule 123 (matrix_access -> identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2 .)
    AND             reduce using rule 123 (matrix_access -> identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2 .)
    OR              reduce using rule 123 (matrix_access -> identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2 .)
    RPAREN          reduce using rule 123 (matrix_access -> identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2 .)


state 210

    (128) matrix_rsqbracket_2 -> RSQBRACKET .

    ASSIGN          reduce using rule 128 (matrix_rsqbracket_2 -> RSQBRACKET .)
    MUL             reduce using rule 128 (matrix_rsqbracket_2 -> RSQBRACKET .)
    DIV             reduce using rule 128 (matrix_rsqbracket_2 -> RSQBRACKET .)
    ADD             reduce using rule 128 (matrix_rsqbracket_2 -> RSQBRACKET .)
    SUB             reduce using rule 128 (matrix_rsqbracket_2 -> RSQBRACKET .)
    COMMA           reduce using rule 128 (matrix_rsqbracket_2 -> RSQBRACKET .)
    SEMICOLON       reduce using rule 128 (matrix_rsqbracket_2 -> RSQBRACKET .)
    RSQBRACKET      reduce using rule 128 (matrix_rsqbracket_2 -> RSQBRACKET .)
    LTHAN           reduce using rule 128 (matrix_rsqbracket_2 -> RSQBRACKET .)
    GTHAN           reduce using rule 128 (matrix_rsqbracket_2 -> RSQBRACKET .)
    EQUAL           reduce using rule 128 (matrix_rsqbracket_2 -> RSQBRACKET .)
    DIFFERENT       reduce using rule 128 (matrix_rsqbracket_2 -> RSQBRACKET .)
    AND             reduce using rule 128 (matrix_rsqbracket_2 -> RSQBRACKET .)
    OR              reduce using rule 128 (matrix_rsqbracket_2 -> RSQBRACKET .)
    RPAREN          reduce using rule 128 (matrix_rsqbracket_2 -> RSQBRACKET .)


state 211

    (70) condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET . fill_pending_jump
    (71) condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET . else LBRACKET statements RBRACKET fill_pending_jump
    (76) fill_pending_jump -> .
    (77) else -> . ELSE

    WRITE           reduce using rule 76 (fill_pending_jump -> .)
    READ            reduce using rule 76 (fill_pending_jump -> .)
    IF              reduce using rule 76 (fill_pending_jump -> .)
    ID              reduce using rule 76 (fill_pending_jump -> .)
    REPEAT          reduce using rule 76 (fill_pending_jump -> .)
    PROCEDURES      reduce using rule 76 (fill_pending_jump -> .)
    BEGIN           reduce using rule 76 (fill_pending_jump -> .)
    RSQBRACKET      reduce using rule 76 (fill_pending_jump -> .)
    RBRACKET        reduce using rule 76 (fill_pending_jump -> .)
    ELSE            shift and go to state 224

    fill_pending_jump              shift and go to state 222
    else                           shift and go to state 223

state 212

    (78) loop -> repeat cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET . fill_returning_jump
    (81) fill_returning_jump -> .

    WRITE           reduce using rule 81 (fill_returning_jump -> .)
    READ            reduce using rule 81 (fill_returning_jump -> .)
    IF              reduce using rule 81 (fill_returning_jump -> .)
    ID              reduce using rule 81 (fill_returning_jump -> .)
    REPEAT          reduce using rule 81 (fill_returning_jump -> .)
    PROCEDURES      reduce using rule 81 (fill_returning_jump -> .)
    BEGIN           reduce using rule 81 (fill_returning_jump -> .)
    RSQBRACKET      reduce using rule 81 (fill_returning_jump -> .)
    RBRACKET        reduce using rule 81 (fill_returning_jump -> .)

    fill_returning_jump            shift and go to state 225

state 213

    (88) call_params1 -> COMMA hyper_expression . handle_call_param call_params1
    (91) hyper_expression -> hyper_expression . AND push_operator hyper_expression
    (92) hyper_expression -> hyper_expression . OR push_operator hyper_expression
    (90) handle_call_param -> .

    AND             shift and go to state 128
    OR              shift and go to state 129
    COMMA           reduce using rule 90 (handle_call_param -> .)
    RPAREN          reduce using rule 90 (handle_call_param -> .)

    handle_call_param              shift and go to state 226

state 214

    (28) matrix_declaration -> ID LSQBRACKET CONST_INT RSQBRACKET LSQBRACKET CONST_INT RSQBRACKET . COLON type SEMICOLON

    COLON           shift and go to state 227


state 215

    (27) array_declaration -> ID LSQBRACKET CONST_INT RSQBRACKET COLON type SEMICOLON .

    VAR             reduce using rule 27 (array_declaration -> ID LSQBRACKET CONST_INT RSQBRACKET COLON type SEMICOLON .)
    INSTRUCTIONS    reduce using rule 27 (array_declaration -> ID LSQBRACKET CONST_INT RSQBRACKET COLON type SEMICOLON .)
    PROCEDURES      reduce using rule 27 (array_declaration -> ID LSQBRACKET CONST_INT RSQBRACKET COLON type SEMICOLON .)
    BEGIN           reduce using rule 27 (array_declaration -> ID LSQBRACKET CONST_INT RSQBRACKET COLON type SEMICOLON .)
    RSQBRACKET      reduce using rule 27 (array_declaration -> ID LSQBRACKET CONST_INT RSQBRACKET COLON type SEMICOLON .)
    RBRACKET        reduce using rule 27 (array_declaration -> ID LSQBRACKET CONST_INT RSQBRACKET COLON type SEMICOLON .)


state 216

    (1) routine -> routine_init ID SEMICOLON global_scope_init global_vars_block instructions_block function_block BEGIN COLON LSQBRACKET local_scope_init local_vars_block fill_main_jump instructions_block RSQBRACKET .

    $end            reduce using rule 1 (routine -> routine_init ID SEMICOLON global_scope_init global_vars_block instructions_block function_block BEGIN COLON LSQBRACKET local_scope_init local_vars_block fill_main_jump instructions_block RSQBRACKET .)


state 217

    (46) param -> ID COLON type .

    COMMA           reduce using rule 46 (param -> ID COLON type .)
    RPAREN          reduce using rule 46 (param -> ID COLON type .)


state 218

    (32) function_declarations -> PROC ID proc_scope_init LPAREN params0 RPAREN COLON . VOID set_return_type LBRACKET local_vars_block store_curr_ip instructions_block function_rbracket function_declarations
    (33) function_declarations -> PROC ID proc_scope_init LPAREN params0 RPAREN COLON . func_type set_return_type LBRACKET local_vars_block store_curr_ip proc_instructions_block RBRACKET function_declarations
    (41) func_type -> . type
    (129) type -> . INT
    (130) type -> . FLOAT

    VOID            shift and go to state 228
    INT             shift and go to state 109
    FLOAT           shift and go to state 110

    func_type                      shift and go to state 229
    type                           shift and go to state 230

state 219

    (44) params1 -> COMMA param . params1
    (44) params1 -> . COMMA param params1
    (45) params1 -> . empty
    (131) empty -> .

    COMMA           shift and go to state 204
    RPAREN          reduce using rule 131 (empty -> .)

    params1                        shift and go to state 231
    empty                          shift and go to state 205

state 220

    (57) write_params1 -> COMMA write_operator expression produce_write_quad . write_params1
    (57) write_params1 -> . COMMA write_operator expression produce_write_quad write_params1
    (58) write_params1 -> . COMMA write_operator const_text produce_write_quad write_params1
    (59) write_params1 -> . empty
    (131) empty -> .

    COMMA           shift and go to state 150
    SEMICOLON       reduce using rule 131 (empty -> .)

    write_params1                  shift and go to state 232
    empty                          shift and go to state 151

state 221

    (58) write_params1 -> COMMA write_operator const_text produce_write_quad . write_params1
    (57) write_params1 -> . COMMA write_operator expression produce_write_quad write_params1
    (58) write_params1 -> . COMMA write_operator const_text produce_write_quad write_params1
    (59) write_params1 -> . empty
    (131) empty -> .

    COMMA           shift and go to state 150
    SEMICOLON       reduce using rule 131 (empty -> .)

    write_params1                  shift and go to state 233
    empty                          shift and go to state 151

state 222

    (70) condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET fill_pending_jump .

    WRITE           reduce using rule 70 (condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET fill_pending_jump .)
    READ            reduce using rule 70 (condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET fill_pending_jump .)
    IF              reduce using rule 70 (condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET fill_pending_jump .)
    ID              reduce using rule 70 (condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET fill_pending_jump .)
    REPEAT          reduce using rule 70 (condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET fill_pending_jump .)
    PROCEDURES      reduce using rule 70 (condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET fill_pending_jump .)
    BEGIN           reduce using rule 70 (condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET fill_pending_jump .)
    RSQBRACKET      reduce using rule 70 (condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET fill_pending_jump .)
    RBRACKET        reduce using rule 70 (condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET fill_pending_jump .)


state 223

    (71) condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET else . LBRACKET statements RBRACKET fill_pending_jump

    LBRACKET        shift and go to state 234


state 224

    (77) else -> ELSE .

    LBRACKET        reduce using rule 77 (else -> ELSE .)


state 225

    (78) loop -> repeat cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET fill_returning_jump .

    WRITE           reduce using rule 78 (loop -> repeat cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET fill_returning_jump .)
    READ            reduce using rule 78 (loop -> repeat cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET fill_returning_jump .)
    IF              reduce using rule 78 (loop -> repeat cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET fill_returning_jump .)
    ID              reduce using rule 78 (loop -> repeat cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET fill_returning_jump .)
    REPEAT          reduce using rule 78 (loop -> repeat cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET fill_returning_jump .)
    PROCEDURES      reduce using rule 78 (loop -> repeat cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET fill_returning_jump .)
    BEGIN           reduce using rule 78 (loop -> repeat cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET fill_returning_jump .)
    RSQBRACKET      reduce using rule 78 (loop -> repeat cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET fill_returning_jump .)
    RBRACKET        reduce using rule 78 (loop -> repeat cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET fill_returning_jump .)


state 226

    (88) call_params1 -> COMMA hyper_expression handle_call_param . call_params1
    (88) call_params1 -> . COMMA hyper_expression handle_call_param call_params1
    (89) call_params1 -> . empty
    (131) empty -> .

    COMMA           shift and go to state 195
    RPAREN          reduce using rule 131 (empty -> .)

    call_params1                   shift and go to state 235
    empty                          shift and go to state 196

state 227

    (28) matrix_declaration -> ID LSQBRACKET CONST_INT RSQBRACKET LSQBRACKET CONST_INT RSQBRACKET COLON . type SEMICOLON
    (129) type -> . INT
    (130) type -> . FLOAT

    INT             shift and go to state 109
    FLOAT           shift and go to state 110

    type                           shift and go to state 236

state 228

    (32) function_declarations -> PROC ID proc_scope_init LPAREN params0 RPAREN COLON VOID . set_return_type LBRACKET local_vars_block store_curr_ip instructions_block function_rbracket function_declarations
    (38) set_return_type -> .

    LBRACKET        reduce using rule 38 (set_return_type -> .)

    set_return_type                shift and go to state 237

state 229

    (33) function_declarations -> PROC ID proc_scope_init LPAREN params0 RPAREN COLON func_type . set_return_type LBRACKET local_vars_block store_curr_ip proc_instructions_block RBRACKET function_declarations
    (38) set_return_type -> .

    LBRACKET        reduce using rule 38 (set_return_type -> .)

    set_return_type                shift and go to state 238

state 230

    (41) func_type -> type .

    LBRACKET        reduce using rule 41 (func_type -> type .)


state 231

    (44) params1 -> COMMA param params1 .

    RPAREN          reduce using rule 44 (params1 -> COMMA param params1 .)


state 232

    (57) write_params1 -> COMMA write_operator expression produce_write_quad write_params1 .

    SEMICOLON       reduce using rule 57 (write_params1 -> COMMA write_operator expression produce_write_quad write_params1 .)


state 233

    (58) write_params1 -> COMMA write_operator const_text produce_write_quad write_params1 .

    SEMICOLON       reduce using rule 58 (write_params1 -> COMMA write_operator const_text produce_write_quad write_params1 .)


state 234

    (71) condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET else LBRACKET . statements RBRACKET fill_pending_jump
    (47) statements -> . write SEMICOLON statements
    (48) statements -> . read SEMICOLON statements
    (49) statements -> . var_assignment SEMICOLON statements
    (50) statements -> . condition statements
    (51) statements -> . loop statements
    (52) statements -> . function_call SEMICOLON statements
    (53) statements -> . empty
    (54) write -> . WRITE write_params0
    (63) read -> . READ push_operator identifier
    (64) var_assignment -> . simple_assignment
    (65) var_assignment -> . array_assignment
    (66) var_assignment -> . matrix_assignment
    (70) condition -> . IF cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET fill_pending_jump
    (71) condition -> . IF cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET else LBRACKET statements RBRACKET fill_pending_jump
    (78) loop -> . repeat cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET fill_returning_jump
    (82) function_call -> . ID function_call_check function_call_lparen call_params0 function_call_rparen
    (131) empty -> .
    (67) simple_assignment -> . identifier ASSIGN push_operator expression
    (68) array_assignment -> . array_access ASSIGN push_operator expression
    (69) matrix_assignment -> . matrix_access ASSIGN push_operator expression
    (80) repeat -> . REPEAT
    (117) identifier -> . ID
    (122) array_access -> . identifier lsqbracket expression array_rsqbracket
    (123) matrix_access -> . identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2

    WRITE           shift and go to state 31
    READ            shift and go to state 32
    IF              shift and go to state 37
    ID              shift and go to state 39
    RBRACKET        reduce using rule 131 (empty -> .)
    REPEAT          shift and go to state 42

    statements                     shift and go to state 239
    write                          shift and go to state 24
    read                           shift and go to state 25
    var_assignment                 shift and go to state 26
    condition                      shift and go to state 27
    loop                           shift and go to state 28
    function_call                  shift and go to state 29
    empty                          shift and go to state 30
    identifier                     shift and go to state 33
    simple_assignment              shift and go to state 34
    array_assignment               shift and go to state 35
    matrix_assignment              shift and go to state 36
    repeat                         shift and go to state 38
    array_access                   shift and go to state 40
    matrix_access                  shift and go to state 41

state 235

    (88) call_params1 -> COMMA hyper_expression handle_call_param call_params1 .

    RPAREN          reduce using rule 88 (call_params1 -> COMMA hyper_expression handle_call_param call_params1 .)


state 236

    (28) matrix_declaration -> ID LSQBRACKET CONST_INT RSQBRACKET LSQBRACKET CONST_INT RSQBRACKET COLON type . SEMICOLON

    SEMICOLON       shift and go to state 240


state 237

    (32) function_declarations -> PROC ID proc_scope_init LPAREN params0 RPAREN COLON VOID set_return_type . LBRACKET local_vars_block store_curr_ip instructions_block function_rbracket function_declarations

    LBRACKET        shift and go to state 241


state 238

    (33) function_declarations -> PROC ID proc_scope_init LPAREN params0 RPAREN COLON func_type set_return_type . LBRACKET local_vars_block store_curr_ip proc_instructions_block RBRACKET function_declarations

    LBRACKET        shift and go to state 242


state 239

    (71) condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET else LBRACKET statements . RBRACKET fill_pending_jump

    RBRACKET        shift and go to state 243


state 240

    (28) matrix_declaration -> ID LSQBRACKET CONST_INT RSQBRACKET LSQBRACKET CONST_INT RSQBRACKET COLON type SEMICOLON .

    VAR             reduce using rule 28 (matrix_declaration -> ID LSQBRACKET CONST_INT RSQBRACKET LSQBRACKET CONST_INT RSQBRACKET COLON type SEMICOLON .)
    INSTRUCTIONS    reduce using rule 28 (matrix_declaration -> ID LSQBRACKET CONST_INT RSQBRACKET LSQBRACKET CONST_INT RSQBRACKET COLON type SEMICOLON .)
    PROCEDURES      reduce using rule 28 (matrix_declaration -> ID LSQBRACKET CONST_INT RSQBRACKET LSQBRACKET CONST_INT RSQBRACKET COLON type SEMICOLON .)
    BEGIN           reduce using rule 28 (matrix_declaration -> ID LSQBRACKET CONST_INT RSQBRACKET LSQBRACKET CONST_INT RSQBRACKET COLON type SEMICOLON .)
    RSQBRACKET      reduce using rule 28 (matrix_declaration -> ID LSQBRACKET CONST_INT RSQBRACKET LSQBRACKET CONST_INT RSQBRACKET COLON type SEMICOLON .)
    RBRACKET        reduce using rule 28 (matrix_declaration -> ID LSQBRACKET CONST_INT RSQBRACKET LSQBRACKET CONST_INT RSQBRACKET COLON type SEMICOLON .)


state 241

    (32) function_declarations -> PROC ID proc_scope_init LPAREN params0 RPAREN COLON VOID set_return_type LBRACKET . local_vars_block store_curr_ip instructions_block function_rbracket function_declarations
    (6) local_vars_block -> . LOCALS COLON var_declarations
    (7) local_vars_block -> . empty
    (131) empty -> .

    LOCALS          shift and go to state 146
    INSTRUCTIONS    reduce using rule 131 (empty -> .)
    RBRACKET        reduce using rule 131 (empty -> .)

    local_vars_block               shift and go to state 244
    empty                          shift and go to state 147

state 242

    (33) function_declarations -> PROC ID proc_scope_init LPAREN params0 RPAREN COLON func_type set_return_type LBRACKET . local_vars_block store_curr_ip proc_instructions_block RBRACKET function_declarations
    (6) local_vars_block -> . LOCALS COLON var_declarations
    (7) local_vars_block -> . empty
    (131) empty -> .

    LOCALS          shift and go to state 146
    INSTRUCTIONS    reduce using rule 131 (empty -> .)
    RBRACKET        reduce using rule 131 (empty -> .)

    local_vars_block               shift and go to state 245
    empty                          shift and go to state 147

state 243

    (71) condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET else LBRACKET statements RBRACKET . fill_pending_jump
    (76) fill_pending_jump -> .

    WRITE           reduce using rule 76 (fill_pending_jump -> .)
    READ            reduce using rule 76 (fill_pending_jump -> .)
    IF              reduce using rule 76 (fill_pending_jump -> .)
    ID              reduce using rule 76 (fill_pending_jump -> .)
    REPEAT          reduce using rule 76 (fill_pending_jump -> .)
    PROCEDURES      reduce using rule 76 (fill_pending_jump -> .)
    BEGIN           reduce using rule 76 (fill_pending_jump -> .)
    RSQBRACKET      reduce using rule 76 (fill_pending_jump -> .)
    RBRACKET        reduce using rule 76 (fill_pending_jump -> .)

    fill_pending_jump              shift and go to state 246

state 244

    (32) function_declarations -> PROC ID proc_scope_init LPAREN params0 RPAREN COLON VOID set_return_type LBRACKET local_vars_block . store_curr_ip instructions_block function_rbracket function_declarations
    (37) store_curr_ip -> .

    INSTRUCTIONS    reduce using rule 37 (store_curr_ip -> .)
    RBRACKET        reduce using rule 37 (store_curr_ip -> .)

    store_curr_ip                  shift and go to state 247

state 245

    (33) function_declarations -> PROC ID proc_scope_init LPAREN params0 RPAREN COLON func_type set_return_type LBRACKET local_vars_block . store_curr_ip proc_instructions_block RBRACKET function_declarations
    (37) store_curr_ip -> .

    INSTRUCTIONS    reduce using rule 37 (store_curr_ip -> .)
    RBRACKET        reduce using rule 37 (store_curr_ip -> .)

    store_curr_ip                  shift and go to state 248

state 246

    (71) condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET else LBRACKET statements RBRACKET fill_pending_jump .

    WRITE           reduce using rule 71 (condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET else LBRACKET statements RBRACKET fill_pending_jump .)
    READ            reduce using rule 71 (condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET else LBRACKET statements RBRACKET fill_pending_jump .)
    IF              reduce using rule 71 (condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET else LBRACKET statements RBRACKET fill_pending_jump .)
    ID              reduce using rule 71 (condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET else LBRACKET statements RBRACKET fill_pending_jump .)
    REPEAT          reduce using rule 71 (condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET else LBRACKET statements RBRACKET fill_pending_jump .)
    PROCEDURES      reduce using rule 71 (condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET else LBRACKET statements RBRACKET fill_pending_jump .)
    BEGIN           reduce using rule 71 (condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET else LBRACKET statements RBRACKET fill_pending_jump .)
    RSQBRACKET      reduce using rule 71 (condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET else LBRACKET statements RBRACKET fill_pending_jump .)
    RBRACKET        reduce using rule 71 (condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET statements RBRACKET else LBRACKET statements RBRACKET fill_pending_jump .)


state 247

    (32) function_declarations -> PROC ID proc_scope_init LPAREN params0 RPAREN COLON VOID set_return_type LBRACKET local_vars_block store_curr_ip . instructions_block function_rbracket function_declarations
    (8) instructions_block -> . INSTRUCTIONS COLON statements
    (9) instructions_block -> . empty
    (131) empty -> .

    INSTRUCTIONS    shift and go to state 11
    RBRACKET        reduce using rule 131 (empty -> .)

    instructions_block             shift and go to state 249
    empty                          shift and go to state 12

state 248

    (33) function_declarations -> PROC ID proc_scope_init LPAREN params0 RPAREN COLON func_type set_return_type LBRACKET local_vars_block store_curr_ip . proc_instructions_block RBRACKET function_declarations
    (10) proc_instructions_block -> . INSTRUCTIONS COLON proc_statements
    (11) proc_instructions_block -> . empty
    (131) empty -> .

    INSTRUCTIONS    shift and go to state 251
    RBRACKET        reduce using rule 131 (empty -> .)

    proc_instructions_block        shift and go to state 250
    empty                          shift and go to state 252

state 249

    (32) function_declarations -> PROC ID proc_scope_init LPAREN params0 RPAREN COLON VOID set_return_type LBRACKET local_vars_block store_curr_ip instructions_block . function_rbracket function_declarations
    (35) function_rbracket -> . RBRACKET

    RBRACKET        shift and go to state 254

    function_rbracket              shift and go to state 253

state 250

    (33) function_declarations -> PROC ID proc_scope_init LPAREN params0 RPAREN COLON func_type set_return_type LBRACKET local_vars_block store_curr_ip proc_instructions_block . RBRACKET function_declarations

    RBRACKET        shift and go to state 255


state 251

    (10) proc_instructions_block -> INSTRUCTIONS . COLON proc_statements

    COLON           shift and go to state 256


state 252

    (11) proc_instructions_block -> empty .

    RBRACKET        reduce using rule 11 (proc_instructions_block -> empty .)


state 253

    (32) function_declarations -> PROC ID proc_scope_init LPAREN params0 RPAREN COLON VOID set_return_type LBRACKET local_vars_block store_curr_ip instructions_block function_rbracket . function_declarations
    (32) function_declarations -> . PROC ID proc_scope_init LPAREN params0 RPAREN COLON VOID set_return_type LBRACKET local_vars_block store_curr_ip instructions_block function_rbracket function_declarations
    (33) function_declarations -> . PROC ID proc_scope_init LPAREN params0 RPAREN COLON func_type set_return_type LBRACKET local_vars_block store_curr_ip proc_instructions_block RBRACKET function_declarations
    (34) function_declarations -> . empty
    (131) empty -> .

    PROC            shift and go to state 49
    BEGIN           reduce using rule 131 (empty -> .)

    function_declarations          shift and go to state 257
    empty                          shift and go to state 50

state 254

    (35) function_rbracket -> RBRACKET .

    PROC            reduce using rule 35 (function_rbracket -> RBRACKET .)
    BEGIN           reduce using rule 35 (function_rbracket -> RBRACKET .)


state 255

    (33) function_declarations -> PROC ID proc_scope_init LPAREN params0 RPAREN COLON func_type set_return_type LBRACKET local_vars_block store_curr_ip proc_instructions_block RBRACKET . function_declarations
    (32) function_declarations -> . PROC ID proc_scope_init LPAREN params0 RPAREN COLON VOID set_return_type LBRACKET local_vars_block store_curr_ip instructions_block function_rbracket function_declarations
    (33) function_declarations -> . PROC ID proc_scope_init LPAREN params0 RPAREN COLON func_type set_return_type LBRACKET local_vars_block store_curr_ip proc_instructions_block RBRACKET function_declarations
    (34) function_declarations -> . empty
    (131) empty -> .

    PROC            shift and go to state 49
    BEGIN           reduce using rule 131 (empty -> .)

    function_declarations          shift and go to state 258
    empty                          shift and go to state 50

state 256

    (10) proc_instructions_block -> INSTRUCTIONS COLON . proc_statements
    (12) proc_statements -> . write SEMICOLON proc_statements
    (13) proc_statements -> . read SEMICOLON proc_statements
    (14) proc_statements -> . var_assignment SEMICOLON proc_statements
    (15) proc_statements -> . proc_condition proc_statements
    (16) proc_statements -> . proc_loop proc_statements
    (17) proc_statements -> . function_call SEMICOLON proc_statements
    (18) proc_statements -> . return expression return_semicolon proc_statements
    (19) proc_statements -> . empty
    (54) write -> . WRITE write_params0
    (63) read -> . READ push_operator identifier
    (64) var_assignment -> . simple_assignment
    (65) var_assignment -> . array_assignment
    (66) var_assignment -> . matrix_assignment
    (72) proc_condition -> . IF cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET fill_pending_jump
    (73) proc_condition -> . IF cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET else LBRACKET proc_statements RBRACKET fill_pending_jump
    (79) proc_loop -> . repeat cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET fill_returning_jump
    (82) function_call -> . ID function_call_check function_call_lparen call_params0 function_call_rparen
    (39) return -> . RETURN
    (131) empty -> .
    (67) simple_assignment -> . identifier ASSIGN push_operator expression
    (68) array_assignment -> . array_access ASSIGN push_operator expression
    (69) matrix_assignment -> . matrix_access ASSIGN push_operator expression
    (80) repeat -> . REPEAT
    (117) identifier -> . ID
    (122) array_access -> . identifier lsqbracket expression array_rsqbracket
    (123) matrix_access -> . identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2

    WRITE           shift and go to state 31
    READ            shift and go to state 32
    IF              shift and go to state 268
    ID              shift and go to state 39
    RETURN          shift and go to state 270
    RBRACKET        reduce using rule 131 (empty -> .)
    REPEAT          shift and go to state 42

    proc_statements                shift and go to state 259
    write                          shift and go to state 260
    read                           shift and go to state 261
    var_assignment                 shift and go to state 262
    proc_condition                 shift and go to state 263
    proc_loop                      shift and go to state 264
    function_call                  shift and go to state 265
    return                         shift and go to state 266
    empty                          shift and go to state 267
    identifier                     shift and go to state 33
    simple_assignment              shift and go to state 34
    array_assignment               shift and go to state 35
    matrix_assignment              shift and go to state 36
    repeat                         shift and go to state 269
    array_access                   shift and go to state 40
    matrix_access                  shift and go to state 41

state 257

    (32) function_declarations -> PROC ID proc_scope_init LPAREN params0 RPAREN COLON VOID set_return_type LBRACKET local_vars_block store_curr_ip instructions_block function_rbracket function_declarations .

    BEGIN           reduce using rule 32 (function_declarations -> PROC ID proc_scope_init LPAREN params0 RPAREN COLON VOID set_return_type LBRACKET local_vars_block store_curr_ip instructions_block function_rbracket function_declarations .)


state 258

    (33) function_declarations -> PROC ID proc_scope_init LPAREN params0 RPAREN COLON func_type set_return_type LBRACKET local_vars_block store_curr_ip proc_instructions_block RBRACKET function_declarations .

    BEGIN           reduce using rule 33 (function_declarations -> PROC ID proc_scope_init LPAREN params0 RPAREN COLON func_type set_return_type LBRACKET local_vars_block store_curr_ip proc_instructions_block RBRACKET function_declarations .)


state 259

    (10) proc_instructions_block -> INSTRUCTIONS COLON proc_statements .

    RBRACKET        reduce using rule 10 (proc_instructions_block -> INSTRUCTIONS COLON proc_statements .)


state 260

    (12) proc_statements -> write . SEMICOLON proc_statements

    SEMICOLON       shift and go to state 271


state 261

    (13) proc_statements -> read . SEMICOLON proc_statements

    SEMICOLON       shift and go to state 272


state 262

    (14) proc_statements -> var_assignment . SEMICOLON proc_statements

    SEMICOLON       shift and go to state 273


state 263

    (15) proc_statements -> proc_condition . proc_statements
    (12) proc_statements -> . write SEMICOLON proc_statements
    (13) proc_statements -> . read SEMICOLON proc_statements
    (14) proc_statements -> . var_assignment SEMICOLON proc_statements
    (15) proc_statements -> . proc_condition proc_statements
    (16) proc_statements -> . proc_loop proc_statements
    (17) proc_statements -> . function_call SEMICOLON proc_statements
    (18) proc_statements -> . return expression return_semicolon proc_statements
    (19) proc_statements -> . empty
    (54) write -> . WRITE write_params0
    (63) read -> . READ push_operator identifier
    (64) var_assignment -> . simple_assignment
    (65) var_assignment -> . array_assignment
    (66) var_assignment -> . matrix_assignment
    (72) proc_condition -> . IF cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET fill_pending_jump
    (73) proc_condition -> . IF cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET else LBRACKET proc_statements RBRACKET fill_pending_jump
    (79) proc_loop -> . repeat cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET fill_returning_jump
    (82) function_call -> . ID function_call_check function_call_lparen call_params0 function_call_rparen
    (39) return -> . RETURN
    (131) empty -> .
    (67) simple_assignment -> . identifier ASSIGN push_operator expression
    (68) array_assignment -> . array_access ASSIGN push_operator expression
    (69) matrix_assignment -> . matrix_access ASSIGN push_operator expression
    (80) repeat -> . REPEAT
    (117) identifier -> . ID
    (122) array_access -> . identifier lsqbracket expression array_rsqbracket
    (123) matrix_access -> . identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2

    WRITE           shift and go to state 31
    READ            shift and go to state 32
    IF              shift and go to state 268
    ID              shift and go to state 39
    RETURN          shift and go to state 270
    RBRACKET        reduce using rule 131 (empty -> .)
    REPEAT          shift and go to state 42

    proc_condition                 shift and go to state 263
    proc_statements                shift and go to state 274
    write                          shift and go to state 260
    read                           shift and go to state 261
    var_assignment                 shift and go to state 262
    proc_loop                      shift and go to state 264
    function_call                  shift and go to state 265
    return                         shift and go to state 266
    empty                          shift and go to state 267
    identifier                     shift and go to state 33
    simple_assignment              shift and go to state 34
    array_assignment               shift and go to state 35
    matrix_assignment              shift and go to state 36
    repeat                         shift and go to state 269
    array_access                   shift and go to state 40
    matrix_access                  shift and go to state 41

state 264

    (16) proc_statements -> proc_loop . proc_statements
    (12) proc_statements -> . write SEMICOLON proc_statements
    (13) proc_statements -> . read SEMICOLON proc_statements
    (14) proc_statements -> . var_assignment SEMICOLON proc_statements
    (15) proc_statements -> . proc_condition proc_statements
    (16) proc_statements -> . proc_loop proc_statements
    (17) proc_statements -> . function_call SEMICOLON proc_statements
    (18) proc_statements -> . return expression return_semicolon proc_statements
    (19) proc_statements -> . empty
    (54) write -> . WRITE write_params0
    (63) read -> . READ push_operator identifier
    (64) var_assignment -> . simple_assignment
    (65) var_assignment -> . array_assignment
    (66) var_assignment -> . matrix_assignment
    (72) proc_condition -> . IF cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET fill_pending_jump
    (73) proc_condition -> . IF cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET else LBRACKET proc_statements RBRACKET fill_pending_jump
    (79) proc_loop -> . repeat cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET fill_returning_jump
    (82) function_call -> . ID function_call_check function_call_lparen call_params0 function_call_rparen
    (39) return -> . RETURN
    (131) empty -> .
    (67) simple_assignment -> . identifier ASSIGN push_operator expression
    (68) array_assignment -> . array_access ASSIGN push_operator expression
    (69) matrix_assignment -> . matrix_access ASSIGN push_operator expression
    (80) repeat -> . REPEAT
    (117) identifier -> . ID
    (122) array_access -> . identifier lsqbracket expression array_rsqbracket
    (123) matrix_access -> . identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2

    WRITE           shift and go to state 31
    READ            shift and go to state 32
    IF              shift and go to state 268
    ID              shift and go to state 39
    RETURN          shift and go to state 270
    RBRACKET        reduce using rule 131 (empty -> .)
    REPEAT          shift and go to state 42

    proc_loop                      shift and go to state 264
    proc_statements                shift and go to state 275
    write                          shift and go to state 260
    read                           shift and go to state 261
    var_assignment                 shift and go to state 262
    proc_condition                 shift and go to state 263
    function_call                  shift and go to state 265
    return                         shift and go to state 266
    empty                          shift and go to state 267
    identifier                     shift and go to state 33
    simple_assignment              shift and go to state 34
    array_assignment               shift and go to state 35
    matrix_assignment              shift and go to state 36
    repeat                         shift and go to state 269
    array_access                   shift and go to state 40
    matrix_access                  shift and go to state 41

state 265

    (17) proc_statements -> function_call . SEMICOLON proc_statements

    SEMICOLON       shift and go to state 276


state 266

    (18) proc_statements -> return . expression return_semicolon proc_statements
    (99) expression -> . expression ADD push_operator expression
    (100) expression -> . expression SUB push_operator expression
    (101) expression -> . term produce_exp_quad
    (102) term -> . term MUL push_operator term
    (103) term -> . term DIV push_operator term
    (104) term -> . factor produce_term_quad
    (110) factor -> . identifier
    (111) factor -> . const_int
    (112) factor -> . const_float
    (113) factor -> . LPAREN push_cap expression RPAREN pop_cap
    (114) factor -> . array_access
    (115) factor -> . matrix_access
    (116) factor -> . function_call
    (117) identifier -> . ID
    (118) const_int -> . CONST_INT
    (119) const_float -> . CONST_FLOAT
    (122) array_access -> . identifier lsqbracket expression array_rsqbracket
    (123) matrix_access -> . identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2
    (82) function_call -> . ID function_call_check function_call_lparen call_params0 function_call_rparen

    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_FLOAT     shift and go to state 94

    expression                     shift and go to state 277
    term                           shift and go to state 82
    factor                         shift and go to state 84
    identifier                     shift and go to state 85
    const_int                      shift and go to state 86
    const_float                    shift and go to state 87
    array_access                   shift and go to state 89
    matrix_access                  shift and go to state 90
    function_call                  shift and go to state 91

state 267

    (19) proc_statements -> empty .

    RBRACKET        reduce using rule 19 (proc_statements -> empty .)


state 268

    (72) proc_condition -> IF . cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET fill_pending_jump
    (73) proc_condition -> IF . cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET else LBRACKET proc_statements RBRACKET fill_pending_jump
    (74) cond_lparen -> . LPAREN

    LPAREN          shift and go to state 64

    cond_lparen                    shift and go to state 278

state 269

    (79) proc_loop -> repeat . cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET fill_returning_jump
    (74) cond_lparen -> . LPAREN

    LPAREN          shift and go to state 64

    cond_lparen                    shift and go to state 279

state 270

    (39) return -> RETURN .

    LPAREN          reduce using rule 39 (return -> RETURN .)
    ID              reduce using rule 39 (return -> RETURN .)
    CONST_INT       reduce using rule 39 (return -> RETURN .)
    CONST_FLOAT     reduce using rule 39 (return -> RETURN .)


state 271

    (12) proc_statements -> write SEMICOLON . proc_statements
    (12) proc_statements -> . write SEMICOLON proc_statements
    (13) proc_statements -> . read SEMICOLON proc_statements
    (14) proc_statements -> . var_assignment SEMICOLON proc_statements
    (15) proc_statements -> . proc_condition proc_statements
    (16) proc_statements -> . proc_loop proc_statements
    (17) proc_statements -> . function_call SEMICOLON proc_statements
    (18) proc_statements -> . return expression return_semicolon proc_statements
    (19) proc_statements -> . empty
    (54) write -> . WRITE write_params0
    (63) read -> . READ push_operator identifier
    (64) var_assignment -> . simple_assignment
    (65) var_assignment -> . array_assignment
    (66) var_assignment -> . matrix_assignment
    (72) proc_condition -> . IF cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET fill_pending_jump
    (73) proc_condition -> . IF cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET else LBRACKET proc_statements RBRACKET fill_pending_jump
    (79) proc_loop -> . repeat cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET fill_returning_jump
    (82) function_call -> . ID function_call_check function_call_lparen call_params0 function_call_rparen
    (39) return -> . RETURN
    (131) empty -> .
    (67) simple_assignment -> . identifier ASSIGN push_operator expression
    (68) array_assignment -> . array_access ASSIGN push_operator expression
    (69) matrix_assignment -> . matrix_access ASSIGN push_operator expression
    (80) repeat -> . REPEAT
    (117) identifier -> . ID
    (122) array_access -> . identifier lsqbracket expression array_rsqbracket
    (123) matrix_access -> . identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2

    WRITE           shift and go to state 31
    READ            shift and go to state 32
    IF              shift and go to state 268
    ID              shift and go to state 39
    RETURN          shift and go to state 270
    RBRACKET        reduce using rule 131 (empty -> .)
    REPEAT          shift and go to state 42

    write                          shift and go to state 260
    proc_statements                shift and go to state 280
    read                           shift and go to state 261
    var_assignment                 shift and go to state 262
    proc_condition                 shift and go to state 263
    proc_loop                      shift and go to state 264
    function_call                  shift and go to state 265
    return                         shift and go to state 266
    empty                          shift and go to state 267
    identifier                     shift and go to state 33
    simple_assignment              shift and go to state 34
    array_assignment               shift and go to state 35
    matrix_assignment              shift and go to state 36
    repeat                         shift and go to state 269
    array_access                   shift and go to state 40
    matrix_access                  shift and go to state 41

state 272

    (13) proc_statements -> read SEMICOLON . proc_statements
    (12) proc_statements -> . write SEMICOLON proc_statements
    (13) proc_statements -> . read SEMICOLON proc_statements
    (14) proc_statements -> . var_assignment SEMICOLON proc_statements
    (15) proc_statements -> . proc_condition proc_statements
    (16) proc_statements -> . proc_loop proc_statements
    (17) proc_statements -> . function_call SEMICOLON proc_statements
    (18) proc_statements -> . return expression return_semicolon proc_statements
    (19) proc_statements -> . empty
    (54) write -> . WRITE write_params0
    (63) read -> . READ push_operator identifier
    (64) var_assignment -> . simple_assignment
    (65) var_assignment -> . array_assignment
    (66) var_assignment -> . matrix_assignment
    (72) proc_condition -> . IF cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET fill_pending_jump
    (73) proc_condition -> . IF cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET else LBRACKET proc_statements RBRACKET fill_pending_jump
    (79) proc_loop -> . repeat cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET fill_returning_jump
    (82) function_call -> . ID function_call_check function_call_lparen call_params0 function_call_rparen
    (39) return -> . RETURN
    (131) empty -> .
    (67) simple_assignment -> . identifier ASSIGN push_operator expression
    (68) array_assignment -> . array_access ASSIGN push_operator expression
    (69) matrix_assignment -> . matrix_access ASSIGN push_operator expression
    (80) repeat -> . REPEAT
    (117) identifier -> . ID
    (122) array_access -> . identifier lsqbracket expression array_rsqbracket
    (123) matrix_access -> . identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2

    WRITE           shift and go to state 31
    READ            shift and go to state 32
    IF              shift and go to state 268
    ID              shift and go to state 39
    RETURN          shift and go to state 270
    RBRACKET        reduce using rule 131 (empty -> .)
    REPEAT          shift and go to state 42

    read                           shift and go to state 261
    proc_statements                shift and go to state 281
    write                          shift and go to state 260
    var_assignment                 shift and go to state 262
    proc_condition                 shift and go to state 263
    proc_loop                      shift and go to state 264
    function_call                  shift and go to state 265
    return                         shift and go to state 266
    empty                          shift and go to state 267
    identifier                     shift and go to state 33
    simple_assignment              shift and go to state 34
    array_assignment               shift and go to state 35
    matrix_assignment              shift and go to state 36
    repeat                         shift and go to state 269
    array_access                   shift and go to state 40
    matrix_access                  shift and go to state 41

state 273

    (14) proc_statements -> var_assignment SEMICOLON . proc_statements
    (12) proc_statements -> . write SEMICOLON proc_statements
    (13) proc_statements -> . read SEMICOLON proc_statements
    (14) proc_statements -> . var_assignment SEMICOLON proc_statements
    (15) proc_statements -> . proc_condition proc_statements
    (16) proc_statements -> . proc_loop proc_statements
    (17) proc_statements -> . function_call SEMICOLON proc_statements
    (18) proc_statements -> . return expression return_semicolon proc_statements
    (19) proc_statements -> . empty
    (54) write -> . WRITE write_params0
    (63) read -> . READ push_operator identifier
    (64) var_assignment -> . simple_assignment
    (65) var_assignment -> . array_assignment
    (66) var_assignment -> . matrix_assignment
    (72) proc_condition -> . IF cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET fill_pending_jump
    (73) proc_condition -> . IF cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET else LBRACKET proc_statements RBRACKET fill_pending_jump
    (79) proc_loop -> . repeat cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET fill_returning_jump
    (82) function_call -> . ID function_call_check function_call_lparen call_params0 function_call_rparen
    (39) return -> . RETURN
    (131) empty -> .
    (67) simple_assignment -> . identifier ASSIGN push_operator expression
    (68) array_assignment -> . array_access ASSIGN push_operator expression
    (69) matrix_assignment -> . matrix_access ASSIGN push_operator expression
    (80) repeat -> . REPEAT
    (117) identifier -> . ID
    (122) array_access -> . identifier lsqbracket expression array_rsqbracket
    (123) matrix_access -> . identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2

    WRITE           shift and go to state 31
    READ            shift and go to state 32
    IF              shift and go to state 268
    ID              shift and go to state 39
    RETURN          shift and go to state 270
    RBRACKET        reduce using rule 131 (empty -> .)
    REPEAT          shift and go to state 42

    var_assignment                 shift and go to state 262
    proc_statements                shift and go to state 282
    write                          shift and go to state 260
    read                           shift and go to state 261
    proc_condition                 shift and go to state 263
    proc_loop                      shift and go to state 264
    function_call                  shift and go to state 265
    return                         shift and go to state 266
    empty                          shift and go to state 267
    identifier                     shift and go to state 33
    simple_assignment              shift and go to state 34
    array_assignment               shift and go to state 35
    matrix_assignment              shift and go to state 36
    repeat                         shift and go to state 269
    array_access                   shift and go to state 40
    matrix_access                  shift and go to state 41

state 274

    (15) proc_statements -> proc_condition proc_statements .

    RBRACKET        reduce using rule 15 (proc_statements -> proc_condition proc_statements .)


state 275

    (16) proc_statements -> proc_loop proc_statements .

    RBRACKET        reduce using rule 16 (proc_statements -> proc_loop proc_statements .)


state 276

    (17) proc_statements -> function_call SEMICOLON . proc_statements
    (12) proc_statements -> . write SEMICOLON proc_statements
    (13) proc_statements -> . read SEMICOLON proc_statements
    (14) proc_statements -> . var_assignment SEMICOLON proc_statements
    (15) proc_statements -> . proc_condition proc_statements
    (16) proc_statements -> . proc_loop proc_statements
    (17) proc_statements -> . function_call SEMICOLON proc_statements
    (18) proc_statements -> . return expression return_semicolon proc_statements
    (19) proc_statements -> . empty
    (54) write -> . WRITE write_params0
    (63) read -> . READ push_operator identifier
    (64) var_assignment -> . simple_assignment
    (65) var_assignment -> . array_assignment
    (66) var_assignment -> . matrix_assignment
    (72) proc_condition -> . IF cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET fill_pending_jump
    (73) proc_condition -> . IF cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET else LBRACKET proc_statements RBRACKET fill_pending_jump
    (79) proc_loop -> . repeat cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET fill_returning_jump
    (82) function_call -> . ID function_call_check function_call_lparen call_params0 function_call_rparen
    (39) return -> . RETURN
    (131) empty -> .
    (67) simple_assignment -> . identifier ASSIGN push_operator expression
    (68) array_assignment -> . array_access ASSIGN push_operator expression
    (69) matrix_assignment -> . matrix_access ASSIGN push_operator expression
    (80) repeat -> . REPEAT
    (117) identifier -> . ID
    (122) array_access -> . identifier lsqbracket expression array_rsqbracket
    (123) matrix_access -> . identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2

    WRITE           shift and go to state 31
    READ            shift and go to state 32
    IF              shift and go to state 268
    ID              shift and go to state 39
    RETURN          shift and go to state 270
    RBRACKET        reduce using rule 131 (empty -> .)
    REPEAT          shift and go to state 42

    function_call                  shift and go to state 265
    proc_statements                shift and go to state 283
    write                          shift and go to state 260
    read                           shift and go to state 261
    var_assignment                 shift and go to state 262
    proc_condition                 shift and go to state 263
    proc_loop                      shift and go to state 264
    return                         shift and go to state 266
    empty                          shift and go to state 267
    identifier                     shift and go to state 33
    simple_assignment              shift and go to state 34
    array_assignment               shift and go to state 35
    matrix_assignment              shift and go to state 36
    repeat                         shift and go to state 269
    array_access                   shift and go to state 40
    matrix_access                  shift and go to state 41

state 277

    (18) proc_statements -> return expression . return_semicolon proc_statements
    (99) expression -> expression . ADD push_operator expression
    (100) expression -> expression . SUB push_operator expression
    (40) return_semicolon -> . SEMICOLON

    ADD             shift and go to state 115
    SUB             shift and go to state 116
    SEMICOLON       shift and go to state 285

    return_semicolon               shift and go to state 284

state 278

    (72) proc_condition -> IF cond_lparen . hyper_expression cond_rparen LBRACKET proc_statements RBRACKET fill_pending_jump
    (73) proc_condition -> IF cond_lparen . hyper_expression cond_rparen LBRACKET proc_statements RBRACKET else LBRACKET proc_statements RBRACKET fill_pending_jump
    (91) hyper_expression -> . hyper_expression AND push_operator hyper_expression
    (92) hyper_expression -> . hyper_expression OR push_operator hyper_expression
    (93) hyper_expression -> . super_expression produce_hyperexp_quad
    (94) super_expression -> . super_expression LTHAN push_operator super_expression
    (95) super_expression -> . super_expression GTHAN push_operator super_expression
    (96) super_expression -> . super_expression EQUAL push_operator super_expression
    (97) super_expression -> . super_expression DIFFERENT push_operator super_expression
    (98) super_expression -> . expression produce_superexp_quad
    (99) expression -> . expression ADD push_operator expression
    (100) expression -> . expression SUB push_operator expression
    (101) expression -> . term produce_exp_quad
    (102) term -> . term MUL push_operator term
    (103) term -> . term DIV push_operator term
    (104) term -> . factor produce_term_quad
    (110) factor -> . identifier
    (111) factor -> . const_int
    (112) factor -> . const_float
    (113) factor -> . LPAREN push_cap expression RPAREN pop_cap
    (114) factor -> . array_access
    (115) factor -> . matrix_access
    (116) factor -> . function_call
    (117) identifier -> . ID
    (118) const_int -> . CONST_INT
    (119) const_float -> . CONST_FLOAT
    (122) array_access -> . identifier lsqbracket expression array_rsqbracket
    (123) matrix_access -> . identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2
    (82) function_call -> . ID function_call_check function_call_lparen call_params0 function_call_rparen

    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_FLOAT     shift and go to state 94

    hyper_expression               shift and go to state 286
    super_expression               shift and go to state 100
    expression                     shift and go to state 101
    term                           shift and go to state 82
    factor                         shift and go to state 84
    identifier                     shift and go to state 85
    const_int                      shift and go to state 86
    const_float                    shift and go to state 87
    array_access                   shift and go to state 89
    matrix_access                  shift and go to state 90
    function_call                  shift and go to state 91

state 279

    (79) proc_loop -> repeat cond_lparen . hyper_expression cond_rparen LBRACKET proc_statements RBRACKET fill_returning_jump
    (91) hyper_expression -> . hyper_expression AND push_operator hyper_expression
    (92) hyper_expression -> . hyper_expression OR push_operator hyper_expression
    (93) hyper_expression -> . super_expression produce_hyperexp_quad
    (94) super_expression -> . super_expression LTHAN push_operator super_expression
    (95) super_expression -> . super_expression GTHAN push_operator super_expression
    (96) super_expression -> . super_expression EQUAL push_operator super_expression
    (97) super_expression -> . super_expression DIFFERENT push_operator super_expression
    (98) super_expression -> . expression produce_superexp_quad
    (99) expression -> . expression ADD push_operator expression
    (100) expression -> . expression SUB push_operator expression
    (101) expression -> . term produce_exp_quad
    (102) term -> . term MUL push_operator term
    (103) term -> . term DIV push_operator term
    (104) term -> . factor produce_term_quad
    (110) factor -> . identifier
    (111) factor -> . const_int
    (112) factor -> . const_float
    (113) factor -> . LPAREN push_cap expression RPAREN pop_cap
    (114) factor -> . array_access
    (115) factor -> . matrix_access
    (116) factor -> . function_call
    (117) identifier -> . ID
    (118) const_int -> . CONST_INT
    (119) const_float -> . CONST_FLOAT
    (122) array_access -> . identifier lsqbracket expression array_rsqbracket
    (123) matrix_access -> . identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2
    (82) function_call -> . ID function_call_check function_call_lparen call_params0 function_call_rparen

    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_FLOAT     shift and go to state 94

    hyper_expression               shift and go to state 287
    super_expression               shift and go to state 100
    expression                     shift and go to state 101
    term                           shift and go to state 82
    factor                         shift and go to state 84
    identifier                     shift and go to state 85
    const_int                      shift and go to state 86
    const_float                    shift and go to state 87
    array_access                   shift and go to state 89
    matrix_access                  shift and go to state 90
    function_call                  shift and go to state 91

state 280

    (12) proc_statements -> write SEMICOLON proc_statements .

    RBRACKET        reduce using rule 12 (proc_statements -> write SEMICOLON proc_statements .)


state 281

    (13) proc_statements -> read SEMICOLON proc_statements .

    RBRACKET        reduce using rule 13 (proc_statements -> read SEMICOLON proc_statements .)


state 282

    (14) proc_statements -> var_assignment SEMICOLON proc_statements .

    RBRACKET        reduce using rule 14 (proc_statements -> var_assignment SEMICOLON proc_statements .)


state 283

    (17) proc_statements -> function_call SEMICOLON proc_statements .

    RBRACKET        reduce using rule 17 (proc_statements -> function_call SEMICOLON proc_statements .)


state 284

    (18) proc_statements -> return expression return_semicolon . proc_statements
    (12) proc_statements -> . write SEMICOLON proc_statements
    (13) proc_statements -> . read SEMICOLON proc_statements
    (14) proc_statements -> . var_assignment SEMICOLON proc_statements
    (15) proc_statements -> . proc_condition proc_statements
    (16) proc_statements -> . proc_loop proc_statements
    (17) proc_statements -> . function_call SEMICOLON proc_statements
    (18) proc_statements -> . return expression return_semicolon proc_statements
    (19) proc_statements -> . empty
    (54) write -> . WRITE write_params0
    (63) read -> . READ push_operator identifier
    (64) var_assignment -> . simple_assignment
    (65) var_assignment -> . array_assignment
    (66) var_assignment -> . matrix_assignment
    (72) proc_condition -> . IF cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET fill_pending_jump
    (73) proc_condition -> . IF cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET else LBRACKET proc_statements RBRACKET fill_pending_jump
    (79) proc_loop -> . repeat cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET fill_returning_jump
    (82) function_call -> . ID function_call_check function_call_lparen call_params0 function_call_rparen
    (39) return -> . RETURN
    (131) empty -> .
    (67) simple_assignment -> . identifier ASSIGN push_operator expression
    (68) array_assignment -> . array_access ASSIGN push_operator expression
    (69) matrix_assignment -> . matrix_access ASSIGN push_operator expression
    (80) repeat -> . REPEAT
    (117) identifier -> . ID
    (122) array_access -> . identifier lsqbracket expression array_rsqbracket
    (123) matrix_access -> . identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2

    WRITE           shift and go to state 31
    READ            shift and go to state 32
    IF              shift and go to state 268
    ID              shift and go to state 39
    RETURN          shift and go to state 270
    RBRACKET        reduce using rule 131 (empty -> .)
    REPEAT          shift and go to state 42

    return                         shift and go to state 266
    proc_statements                shift and go to state 288
    write                          shift and go to state 260
    read                           shift and go to state 261
    var_assignment                 shift and go to state 262
    proc_condition                 shift and go to state 263
    proc_loop                      shift and go to state 264
    function_call                  shift and go to state 265
    empty                          shift and go to state 267
    identifier                     shift and go to state 33
    simple_assignment              shift and go to state 34
    array_assignment               shift and go to state 35
    matrix_assignment              shift and go to state 36
    repeat                         shift and go to state 269
    array_access                   shift and go to state 40
    matrix_access                  shift and go to state 41

state 285

    (40) return_semicolon -> SEMICOLON .

    WRITE           reduce using rule 40 (return_semicolon -> SEMICOLON .)
    READ            reduce using rule 40 (return_semicolon -> SEMICOLON .)
    IF              reduce using rule 40 (return_semicolon -> SEMICOLON .)
    ID              reduce using rule 40 (return_semicolon -> SEMICOLON .)
    RETURN          reduce using rule 40 (return_semicolon -> SEMICOLON .)
    REPEAT          reduce using rule 40 (return_semicolon -> SEMICOLON .)
    RBRACKET        reduce using rule 40 (return_semicolon -> SEMICOLON .)


state 286

    (72) proc_condition -> IF cond_lparen hyper_expression . cond_rparen LBRACKET proc_statements RBRACKET fill_pending_jump
    (73) proc_condition -> IF cond_lparen hyper_expression . cond_rparen LBRACKET proc_statements RBRACKET else LBRACKET proc_statements RBRACKET fill_pending_jump
    (91) hyper_expression -> hyper_expression . AND push_operator hyper_expression
    (92) hyper_expression -> hyper_expression . OR push_operator hyper_expression
    (75) cond_rparen -> . RPAREN

    AND             shift and go to state 128
    OR              shift and go to state 129
    RPAREN          shift and go to state 130

    cond_rparen                    shift and go to state 289

state 287

    (79) proc_loop -> repeat cond_lparen hyper_expression . cond_rparen LBRACKET proc_statements RBRACKET fill_returning_jump
    (91) hyper_expression -> hyper_expression . AND push_operator hyper_expression
    (92) hyper_expression -> hyper_expression . OR push_operator hyper_expression
    (75) cond_rparen -> . RPAREN

    AND             shift and go to state 128
    OR              shift and go to state 129
    RPAREN          shift and go to state 130

    cond_rparen                    shift and go to state 290

state 288

    (18) proc_statements -> return expression return_semicolon proc_statements .

    RBRACKET        reduce using rule 18 (proc_statements -> return expression return_semicolon proc_statements .)


state 289

    (72) proc_condition -> IF cond_lparen hyper_expression cond_rparen . LBRACKET proc_statements RBRACKET fill_pending_jump
    (73) proc_condition -> IF cond_lparen hyper_expression cond_rparen . LBRACKET proc_statements RBRACKET else LBRACKET proc_statements RBRACKET fill_pending_jump

    LBRACKET        shift and go to state 291


state 290

    (79) proc_loop -> repeat cond_lparen hyper_expression cond_rparen . LBRACKET proc_statements RBRACKET fill_returning_jump

    LBRACKET        shift and go to state 292


state 291

    (72) proc_condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET . proc_statements RBRACKET fill_pending_jump
    (73) proc_condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET . proc_statements RBRACKET else LBRACKET proc_statements RBRACKET fill_pending_jump
    (12) proc_statements -> . write SEMICOLON proc_statements
    (13) proc_statements -> . read SEMICOLON proc_statements
    (14) proc_statements -> . var_assignment SEMICOLON proc_statements
    (15) proc_statements -> . proc_condition proc_statements
    (16) proc_statements -> . proc_loop proc_statements
    (17) proc_statements -> . function_call SEMICOLON proc_statements
    (18) proc_statements -> . return expression return_semicolon proc_statements
    (19) proc_statements -> . empty
    (54) write -> . WRITE write_params0
    (63) read -> . READ push_operator identifier
    (64) var_assignment -> . simple_assignment
    (65) var_assignment -> . array_assignment
    (66) var_assignment -> . matrix_assignment
    (72) proc_condition -> . IF cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET fill_pending_jump
    (73) proc_condition -> . IF cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET else LBRACKET proc_statements RBRACKET fill_pending_jump
    (79) proc_loop -> . repeat cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET fill_returning_jump
    (82) function_call -> . ID function_call_check function_call_lparen call_params0 function_call_rparen
    (39) return -> . RETURN
    (131) empty -> .
    (67) simple_assignment -> . identifier ASSIGN push_operator expression
    (68) array_assignment -> . array_access ASSIGN push_operator expression
    (69) matrix_assignment -> . matrix_access ASSIGN push_operator expression
    (80) repeat -> . REPEAT
    (117) identifier -> . ID
    (122) array_access -> . identifier lsqbracket expression array_rsqbracket
    (123) matrix_access -> . identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2

    WRITE           shift and go to state 31
    READ            shift and go to state 32
    IF              shift and go to state 268
    ID              shift and go to state 39
    RETURN          shift and go to state 270
    RBRACKET        reduce using rule 131 (empty -> .)
    REPEAT          shift and go to state 42

    proc_statements                shift and go to state 293
    write                          shift and go to state 260
    read                           shift and go to state 261
    var_assignment                 shift and go to state 262
    proc_condition                 shift and go to state 263
    proc_loop                      shift and go to state 264
    function_call                  shift and go to state 265
    return                         shift and go to state 266
    empty                          shift and go to state 267
    identifier                     shift and go to state 33
    simple_assignment              shift and go to state 34
    array_assignment               shift and go to state 35
    matrix_assignment              shift and go to state 36
    repeat                         shift and go to state 269
    array_access                   shift and go to state 40
    matrix_access                  shift and go to state 41

state 292

    (79) proc_loop -> repeat cond_lparen hyper_expression cond_rparen LBRACKET . proc_statements RBRACKET fill_returning_jump
    (12) proc_statements -> . write SEMICOLON proc_statements
    (13) proc_statements -> . read SEMICOLON proc_statements
    (14) proc_statements -> . var_assignment SEMICOLON proc_statements
    (15) proc_statements -> . proc_condition proc_statements
    (16) proc_statements -> . proc_loop proc_statements
    (17) proc_statements -> . function_call SEMICOLON proc_statements
    (18) proc_statements -> . return expression return_semicolon proc_statements
    (19) proc_statements -> . empty
    (54) write -> . WRITE write_params0
    (63) read -> . READ push_operator identifier
    (64) var_assignment -> . simple_assignment
    (65) var_assignment -> . array_assignment
    (66) var_assignment -> . matrix_assignment
    (72) proc_condition -> . IF cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET fill_pending_jump
    (73) proc_condition -> . IF cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET else LBRACKET proc_statements RBRACKET fill_pending_jump
    (79) proc_loop -> . repeat cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET fill_returning_jump
    (82) function_call -> . ID function_call_check function_call_lparen call_params0 function_call_rparen
    (39) return -> . RETURN
    (131) empty -> .
    (67) simple_assignment -> . identifier ASSIGN push_operator expression
    (68) array_assignment -> . array_access ASSIGN push_operator expression
    (69) matrix_assignment -> . matrix_access ASSIGN push_operator expression
    (80) repeat -> . REPEAT
    (117) identifier -> . ID
    (122) array_access -> . identifier lsqbracket expression array_rsqbracket
    (123) matrix_access -> . identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2

    WRITE           shift and go to state 31
    READ            shift and go to state 32
    IF              shift and go to state 268
    ID              shift and go to state 39
    RETURN          shift and go to state 270
    RBRACKET        reduce using rule 131 (empty -> .)
    REPEAT          shift and go to state 42

    repeat                         shift and go to state 269
    proc_statements                shift and go to state 294
    write                          shift and go to state 260
    read                           shift and go to state 261
    var_assignment                 shift and go to state 262
    proc_condition                 shift and go to state 263
    proc_loop                      shift and go to state 264
    function_call                  shift and go to state 265
    return                         shift and go to state 266
    empty                          shift and go to state 267
    identifier                     shift and go to state 33
    simple_assignment              shift and go to state 34
    array_assignment               shift and go to state 35
    matrix_assignment              shift and go to state 36
    array_access                   shift and go to state 40
    matrix_access                  shift and go to state 41

state 293

    (72) proc_condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET proc_statements . RBRACKET fill_pending_jump
    (73) proc_condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET proc_statements . RBRACKET else LBRACKET proc_statements RBRACKET fill_pending_jump

    RBRACKET        shift and go to state 295


state 294

    (79) proc_loop -> repeat cond_lparen hyper_expression cond_rparen LBRACKET proc_statements . RBRACKET fill_returning_jump

    RBRACKET        shift and go to state 296


state 295

    (72) proc_condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET . fill_pending_jump
    (73) proc_condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET . else LBRACKET proc_statements RBRACKET fill_pending_jump
    (76) fill_pending_jump -> .
    (77) else -> . ELSE

    WRITE           reduce using rule 76 (fill_pending_jump -> .)
    READ            reduce using rule 76 (fill_pending_jump -> .)
    IF              reduce using rule 76 (fill_pending_jump -> .)
    ID              reduce using rule 76 (fill_pending_jump -> .)
    RETURN          reduce using rule 76 (fill_pending_jump -> .)
    REPEAT          reduce using rule 76 (fill_pending_jump -> .)
    RBRACKET        reduce using rule 76 (fill_pending_jump -> .)
    ELSE            shift and go to state 224

    fill_pending_jump              shift and go to state 297
    else                           shift and go to state 298

state 296

    (79) proc_loop -> repeat cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET . fill_returning_jump
    (81) fill_returning_jump -> .

    WRITE           reduce using rule 81 (fill_returning_jump -> .)
    READ            reduce using rule 81 (fill_returning_jump -> .)
    IF              reduce using rule 81 (fill_returning_jump -> .)
    ID              reduce using rule 81 (fill_returning_jump -> .)
    RETURN          reduce using rule 81 (fill_returning_jump -> .)
    REPEAT          reduce using rule 81 (fill_returning_jump -> .)
    RBRACKET        reduce using rule 81 (fill_returning_jump -> .)

    fill_returning_jump            shift and go to state 299

state 297

    (72) proc_condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET fill_pending_jump .

    WRITE           reduce using rule 72 (proc_condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET fill_pending_jump .)
    READ            reduce using rule 72 (proc_condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET fill_pending_jump .)
    IF              reduce using rule 72 (proc_condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET fill_pending_jump .)
    ID              reduce using rule 72 (proc_condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET fill_pending_jump .)
    RETURN          reduce using rule 72 (proc_condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET fill_pending_jump .)
    REPEAT          reduce using rule 72 (proc_condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET fill_pending_jump .)
    RBRACKET        reduce using rule 72 (proc_condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET fill_pending_jump .)


state 298

    (73) proc_condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET else . LBRACKET proc_statements RBRACKET fill_pending_jump

    LBRACKET        shift and go to state 300


state 299

    (79) proc_loop -> repeat cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET fill_returning_jump .

    WRITE           reduce using rule 79 (proc_loop -> repeat cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET fill_returning_jump .)
    READ            reduce using rule 79 (proc_loop -> repeat cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET fill_returning_jump .)
    IF              reduce using rule 79 (proc_loop -> repeat cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET fill_returning_jump .)
    ID              reduce using rule 79 (proc_loop -> repeat cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET fill_returning_jump .)
    RETURN          reduce using rule 79 (proc_loop -> repeat cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET fill_returning_jump .)
    REPEAT          reduce using rule 79 (proc_loop -> repeat cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET fill_returning_jump .)
    RBRACKET        reduce using rule 79 (proc_loop -> repeat cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET fill_returning_jump .)


state 300

    (73) proc_condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET else LBRACKET . proc_statements RBRACKET fill_pending_jump
    (12) proc_statements -> . write SEMICOLON proc_statements
    (13) proc_statements -> . read SEMICOLON proc_statements
    (14) proc_statements -> . var_assignment SEMICOLON proc_statements
    (15) proc_statements -> . proc_condition proc_statements
    (16) proc_statements -> . proc_loop proc_statements
    (17) proc_statements -> . function_call SEMICOLON proc_statements
    (18) proc_statements -> . return expression return_semicolon proc_statements
    (19) proc_statements -> . empty
    (54) write -> . WRITE write_params0
    (63) read -> . READ push_operator identifier
    (64) var_assignment -> . simple_assignment
    (65) var_assignment -> . array_assignment
    (66) var_assignment -> . matrix_assignment
    (72) proc_condition -> . IF cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET fill_pending_jump
    (73) proc_condition -> . IF cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET else LBRACKET proc_statements RBRACKET fill_pending_jump
    (79) proc_loop -> . repeat cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET fill_returning_jump
    (82) function_call -> . ID function_call_check function_call_lparen call_params0 function_call_rparen
    (39) return -> . RETURN
    (131) empty -> .
    (67) simple_assignment -> . identifier ASSIGN push_operator expression
    (68) array_assignment -> . array_access ASSIGN push_operator expression
    (69) matrix_assignment -> . matrix_access ASSIGN push_operator expression
    (80) repeat -> . REPEAT
    (117) identifier -> . ID
    (122) array_access -> . identifier lsqbracket expression array_rsqbracket
    (123) matrix_access -> . identifier lsqbracket expression matrix_rsqbracket_1 matrix_lsqbracket_2 expression matrix_rsqbracket_2

    WRITE           shift and go to state 31
    READ            shift and go to state 32
    IF              shift and go to state 268
    ID              shift and go to state 39
    RETURN          shift and go to state 270
    RBRACKET        reduce using rule 131 (empty -> .)
    REPEAT          shift and go to state 42

    proc_statements                shift and go to state 301
    write                          shift and go to state 260
    read                           shift and go to state 261
    var_assignment                 shift and go to state 262
    proc_condition                 shift and go to state 263
    proc_loop                      shift and go to state 264
    function_call                  shift and go to state 265
    return                         shift and go to state 266
    empty                          shift and go to state 267
    identifier                     shift and go to state 33
    simple_assignment              shift and go to state 34
    array_assignment               shift and go to state 35
    matrix_assignment              shift and go to state 36
    repeat                         shift and go to state 269
    array_access                   shift and go to state 40
    matrix_access                  shift and go to state 41

state 301

    (73) proc_condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET else LBRACKET proc_statements . RBRACKET fill_pending_jump

    RBRACKET        shift and go to state 302


state 302

    (73) proc_condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET else LBRACKET proc_statements RBRACKET . fill_pending_jump
    (76) fill_pending_jump -> .

    WRITE           reduce using rule 76 (fill_pending_jump -> .)
    READ            reduce using rule 76 (fill_pending_jump -> .)
    IF              reduce using rule 76 (fill_pending_jump -> .)
    ID              reduce using rule 76 (fill_pending_jump -> .)
    RETURN          reduce using rule 76 (fill_pending_jump -> .)
    REPEAT          reduce using rule 76 (fill_pending_jump -> .)
    RBRACKET        reduce using rule 76 (fill_pending_jump -> .)

    fill_pending_jump              shift and go to state 303

state 303

    (73) proc_condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET else LBRACKET proc_statements RBRACKET fill_pending_jump .

    WRITE           reduce using rule 73 (proc_condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET else LBRACKET proc_statements RBRACKET fill_pending_jump .)
    READ            reduce using rule 73 (proc_condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET else LBRACKET proc_statements RBRACKET fill_pending_jump .)
    IF              reduce using rule 73 (proc_condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET else LBRACKET proc_statements RBRACKET fill_pending_jump .)
    ID              reduce using rule 73 (proc_condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET else LBRACKET proc_statements RBRACKET fill_pending_jump .)
    RETURN          reduce using rule 73 (proc_condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET else LBRACKET proc_statements RBRACKET fill_pending_jump .)
    REPEAT          reduce using rule 73 (proc_condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET else LBRACKET proc_statements RBRACKET fill_pending_jump .)
    RBRACKET        reduce using rule 73 (proc_condition -> IF cond_lparen hyper_expression cond_rparen LBRACKET proc_statements RBRACKET else LBRACKET proc_statements RBRACKET fill_pending_jump .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ADD in state 180 resolved as shift
WARNING: shift/reduce conflict for SUB in state 180 resolved as shift
WARNING: shift/reduce conflict for ADD in state 181 resolved as shift
WARNING: shift/reduce conflict for SUB in state 181 resolved as shift
WARNING: shift/reduce conflict for MUL in state 182 resolved as shift
WARNING: shift/reduce conflict for DIV in state 182 resolved as shift
WARNING: shift/reduce conflict for MUL in state 183 resolved as shift
WARNING: shift/reduce conflict for DIV in state 183 resolved as shift
WARNING: shift/reduce conflict for AND in state 187 resolved as shift
WARNING: shift/reduce conflict for OR in state 187 resolved as shift
WARNING: shift/reduce conflict for AND in state 188 resolved as shift
WARNING: shift/reduce conflict for OR in state 188 resolved as shift
WARNING: shift/reduce conflict for LTHAN in state 189 resolved as shift
WARNING: shift/reduce conflict for GTHAN in state 189 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 189 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 189 resolved as shift
WARNING: shift/reduce conflict for LTHAN in state 190 resolved as shift
WARNING: shift/reduce conflict for GTHAN in state 190 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 190 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 190 resolved as shift
WARNING: shift/reduce conflict for LTHAN in state 191 resolved as shift
WARNING: shift/reduce conflict for GTHAN in state 191 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 191 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 191 resolved as shift
WARNING: shift/reduce conflict for LTHAN in state 192 resolved as shift
WARNING: shift/reduce conflict for GTHAN in state 192 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 192 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 192 resolved as shift
